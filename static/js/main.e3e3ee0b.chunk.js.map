{"version":3,"sources":["assets/images/preloader1.gif","assets/images/user.png","components/Profile/Profile.module.css","components/Profile/MyPosts/Post/Post.module.css","components/common/FormsControls/FormsControls.module.css","components/Navbar/Navbar.module.css","components/common/utils/indexedDB.js","api/api.js","redux/auth-reducer.js","components/Header/Header.jsx","components/Navbar/Navbar.jsx","hoc/WithAuthRedirect.jsx","components/common/utils/quotes.js","redux/chats-reducer.js","components/common/Preloader/Preloader.js","components/common/utils/convertTime.js","components/common/FormsControls/FormsControls.jsx","utils/validators/validators.js","components/common/utils/backupQuotes.js","components/common/utils/object-helpers.js","redux/users-reducer.js","components/Users/User.jsx","components/common/Paginator/Paginator.jsx","components/Users/Users.jsx","redux/users-selectors.js","components/Users/UsersSearch.jsx","components/Users/UsersContainer.jsx","customHooks/usersHooks.jsx","components/Chats/ChatItem/ChatItem.jsx","redux/chats-selector.js","redux/app-reducer.js","components/Chats/ChatsContainer.jsx","redux/profile-reducer.js","customHooks/hotEditing.jsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/Profile.jsx","customHooks/reduceUnsafeMethods.jsx","components/Login/Login.jsx","components/Profile/UpdateDeleteProfile/UpdateProfile.jsx","components/Chats/Message/EditMessage.jsx","components/Chats/Message/Message.jsx","components/Chats/Message/CreateMessage.jsx","components/Chats/ChatItem/ChatDetail.jsx","App.js","serviceWorker.js","redux/sidebar-reducer.js","redux/redux-store.js","index.js","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Chats/Chats.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Chats/Message/Message.module.css","components/Header/Header.module.css","components/common/Paginator/paginator.module.css","components/Users/Users.module.css"],"names":["module","exports","dbPromise","openDB","upgrade","db","createObjectStore","idbKeyval","key","get","val","put","delete","instance","axios","baseURL","headers","interceptors","request","use","config","a","token","error","Promise","reject","authAPI","login","password","console","log","post","profileAPI","userId","profileData","status","photo","usersAPI","getUsers","currentPage","query","follow","unfollow","getfollow","chatsAPI","chatPut","chatTypeId","chatId","putType","secondArgName","secondArg","putData","getChats","page","createChat","snusers","name","getChat","deleteChat","clearChat","clearType","this","renameChat","newChatName","updateUnreadMsgs","lastGlobalReadMsgId","toogleMemberStatusForConversation","addMemberForConversation","removeMemberFromConversation","removeMemberMsgsForConversation","removeOneMemberMsgForConversation","setChatPhoto","newChatPhoto","getMessages","readFromIndex","readFromIndexBefore","numOfDeletedMsgs","createMessage","messageBody","fileId","getFile","uploadFile","fileURL","fileName","editMessage","messageId","newMessageBody","deleteMessage","initialState","email","isAuth","setAuthUserData","type","payload","destructAUD","data","dispatchSAUD","dispatch","authReducer","state","action","Header","props","className","s","header","src","loginBlock","onClick","logout","to","HeaderContainer","React","Component","connect","auth","Navbar","nav","item","activeClassName","activeLink","active","mapStateToPropsForRedirect","withAuthRedirect","WrappedComponent","RedirectComponent","replaceQuotes","string","JSON","parse","replace","chatsAliases","messages","chats","currentChat","isFetching","isUnmount","membersToSelect","readFromIndexNext","IsFetchingMsgs","loadingFilesIds","windowScrollOnMsgCreate","isMessageCreating","isRefreshedAfterMC","setCurrentChatMembers","members","setCurrentChatName","setCurrentChatPhoto","chatPhoto","setCurrentChatIdsToStore","currentChatDataFetching","setChats","setMessages","setReadFromIndexes","setFetchingMoreMsgs","shouldWindowScrollDown","setMessageCreating","setRefreshMessageCreating","refreshCurrentChatData","method","requiredDataKey","parseInt","localStorage","getItem","response","resultCode","getChatHelper","chatArray","all","map","chat","id","chatTimeStamp","unfilteredArray","sort","chat1","chat2","getMessagesHelper","array","msg","isRefreshAfterMsgCreating","allMsgs","items","length","createMessageSnippent","message","stopSubmit","_error","clearChatTypes","cleared","clearChatMyLocal","clearChatMyGlobal","clearChatAllLocal","clearChatAllGlobal","createChatRequest","created","renameChatRequest","renamed","addMember","chatPutParts","bind","setChatPhotoRequest","apiMethod","onSuccStr","onSuccDataKey","onErrorStr","storeDispatchMethod","chatsReducer","nodm","body","Preloader","style","backgroundColor","preloader","width","height","convertTime","unix_timestamp","time","Date","hours","getHours","mins","getMinutes","FormControl","input","meta","touched","warning","children","hasError","hasWarn","styles","formControl","TextArea","restProps","child","Input","FileInput","getBase64","file","resolve","reader","FileReader","readAsDataURL","onload","result","onerror","onFileChange","e","targetFile","target","files","onChange","createField","placeholder","component","validators","text","Field","validate","ReduxFormSnippet","pristine","reset","submitting","sumbitButtonName","formSummaryError","disabled","requiredField","value","maxLength","max","undefined","maxLength30","maxLength50","maxLength200","maxLength1000","backupQuotes","stringify","updateObjectInArray","itmes","itemId","objPropName","newObjProps","users","pageSize","totalUsersCount","followingInProgress","followUnfollowSuccess","userRelation","setUsers","setCurrentPage","setTotalUsersCount","count","toggleIsFetching","toggleFollowingProgress","searchUsers","totalCount","followUnfollowFlow","actionCreator","response2","usersReducer","l","filter","User","user","photos","small","userPhoto","some","ForChatUser","setSelectedForChatUsers","setSelectedForChatUser","selectedForChatUsers","chatUsersIds","styleForUser","userChoosePhoto","alt","includes","selUserId","color","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","paginator","p","cn","selectedPage","pageNumber","Users","forChat","styleForUsers","u","fWAUFC","clearCurrentFocusedWindow","createSelector","usersPage","getQuery","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersSearchReduxForm","reduxForm","form","handleSubmit","onSubmit","defaultValue","setQuery","htmlFor","formData","search","compose","useEffect","useUsersEffects","fWUFCID","ChangeChatPhotoFormRedux","msgStyle","addBorder","ChangeChatPhoto","newPhotoObject","RenameChatFormRedux","RenameChat","Member","member","memberStyle","chatMemberSettings","setMemberOperShow","setSelectedMember","memberName","memberPhoto","event","Members","membersShow","memberOperShow","selectedMember","memberOpers","styleMessages","chatsMembersActive","chatsMembers","smthElseListActive","smthElseList","memberOper","subElemMSBs","infoItemMSBs","membOperLink","SelectMemberToChat","getMemberList","stopPropagation","selectedForChatUser","usersForChatActive","userForChat","LastMessage","sended","authorName","chatLMAuthorName","chatLMAuthorNameDotted","chatLMBody","chatLMSended","ChatItem","lastMessage","getCountOfNewGlobalMsgs","chatType","setCurrentChatData","chatPhotoSmall","deleteChatRequest","clearChatByMethod","path","subElem2","addMemberHeader","chatItem","chatItemData","chatItemPhoto","Object","keys","chatItemNewMsgsNum","chatItemName","chatSettings","chatSettingsHeader","chatSettingsMembersListHeader","chatSettingsMembersList","smthElseHeader","subElem","infoItem","renameChatHeader","renameChatItem","changePhotoChat","addMemberItem","addFocusedWindow","selectChats","chatsPage","selectChatMessages","selectCTIPS","selectCIPS","selectCurrentChat","selectFocusedWindowsPS","app","focusedWindows","selectFocusedWindowsIdsPS","focusedWindowsIds","selectFocusedWindow","windowIdKey","find","window","selectFocusedWindowUsersForChat","selectFocusedWindowAddUserForChat","selectFocusedWindowMembersForChat","selectFocusedWindowMemberOperationsForChat","initialized","fWUsersFCId","fWAddUserFCId","fWMembersId","fWMemberOperationsId","newFocusedWindow","currentWindowId","appReducer","CreateChatReduxForm","chatsStyles","createChatForm","myUserId","OLDsnusers","usersToSelect","fWUFC","fWMFC","fWMOFC","setItem","unSetCurrentChatData","createDialog","createConversation","withRouter","iF","setIF","callbackMethod","useUsersSelector","fetchData","setTimeout","chatsElements","chats_header","createChatHeader","toogleFocuseElem","chatsItems","posts","likesCount","profile","setUserProfile","setStatus","setUpdateUserProfile","getUserProfile","contacts","updateUserProfile","profileReducer","newPost","newPostText","postId","useHotEditing","startFieldValue","apiFunction","editMode","setEditMode","fieldValue","setFieldValue","isInvalid","setisInvalid","charCount","setCharCount","activateEditMode","deactivateEditMode","onFieldValueChange","every","valid","currentTarget","chars","currLen","ProfileStatusWithHooks","updateStatus","onStatusChange","ENSM","onDoubleClick","autoFocus","onBlur","ProfileInfo","updatePhoto","large","profile_info","landi_block","descriptionBlock","ava_block","username","userinfo","href","Post","AddNewPostFormRedux","profilePage","addPost","postsElements","postsBlock","myPostsHeader","createPost","deleteUserProfile","exchangeNotSafeMethods","setExchangeNotSafeMethods","shown","setShown","isReduced","useForbidUnsafeMethods","reduceMethods","match","params","history","profile_wrapper","LoginReduxForm","UpdateProfileReduxForm","lookingForAJob","lFAJ","setLFAJ","checked","lookingForAJobDescription","fullname","github","vk","facebook","instagram","twitter","website","youtube","mainLink","profileRedirect","setProfileRedirect","addProfleFilledProperty","obj","prop","subObjects","start","startsWith","split","profProp","reduce","res","EditMessageActive","onMBChange","editedMessage","editField","errorField","countChars","EditMessageInactive","fileImageURL","loadFile","messageFile","fileImageDeactivate","fileImageActivate","urltoFile","url","filename","mimeType","fetch","then","arrayBuffer","buf","newFile","File","EditMessage","setFII","setFU","isImage","format","upload","forwardRef","ref","inputRef","useRef","useImperativeHandle","node","current","editMessageRequest","deleteMessageRequest","downloadFile","messageAuthorName","authorId","messageSendedEdited","messageSended","messageEdited","edited","msgCreationStyleForm","CreateMessageReduxForm","createMessageRequest","fileUploadResponse","getMessageTagWithRef","refCondition","withNewMsgsTag","NMTRefCondition","newMsgsStartTag","local","_chatTypeId","_chatId","getCurrentChatData","isUpdated","toogleMemberStatus","removeMemberMsgs","removeOneMemberMsg","removeMember","downloadedFile","_readFromIndexNext","_readFromIndex","oldMsgsDonwload","setOldMsgsDonwload","preFetch","setPreFetch","refToTopAtStart","setRTTAS","positioningScrollRefScroll","setPSRS","refOMDPSR","refAtStart","refToObserve","refreshIsRunning","setRIR","refLastMsg","ULTIMATE_CALLBACK","firstNewMsgID","scrollIntoView","steps","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","innerText","unobserve","threshold","Array","fill","_","index","observe","nodeToScrollType","nodeToScroll","conditionNTS","nodeToObserve","scrollTop","scrollHeight","populatePreFetchData","sTOID","clearTimeout","fetchOldMsgs","beforeMsgsDiv","loadOldMsgsDiv","startChatDiv","dataToMsg","flat","unshift","chatMember","styleChats","selectedMemberId","chatsHeader","chatsHeaderPhoto","chatsHeaderPhotoAlt","chatsHeaderName","chatsHeaderSettings","chatsSettings","chatsSettingsItem","chatsSettingsItemH","chatsSettingsItemForm","chatsMembersHeader","createMessageForm","App","memo","initializeApp","clearAllFocusedWindows","render","Profile","exact","detail","catch","Boolean","location","hostname","sidebarReducer","reducers","combineReducers","sidebar","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","__store__","reactDebugHooks","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e3e3ee0b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/preloader1.d5c02aa6.gif\";","module.exports = __webpack_public_path__ + \"static/media/user.8b1dbb1f.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile_wrapper\":\"Profile_profile_wrapper__1lJ4_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3_OiR\",\"posts\":\"Post_posts__wEapD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1Wssk\",\"error\":\"FormsControls_error__Lr8A7\",\"warning\":\"FormsControls_warning__1ik2A\",\"formSummaryError\":\"FormsControls_formSummaryError__1vavX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2Na0t\",\"item\":\"Navbar_item__1bENr\",\"activeLink\":\"Navbar_activeLink__1wupa\"};","// let db;\r\n// // let indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB\r\n// let dbReq = indexedDB.open('myDB', 1);\r\n// dbReq.onupgradeneeded = (event) => {\r\n//     // Зададим переменной db ссылку на базу данных\r\n//     db = event.target.result;\r\n//     // Создадим хранилище объектов с именем notes.\r\n//     let authorization = db.createObjectStore('authorization', { autoIncrement: true });\r\n// }\r\n// dbReq.onsuccess = (event) => {\r\n//     db = event.target.result;\r\n// }\r\n// dbReq.onerror = (event) => {\r\n//     console.log('error opening database ' + event.target.errorCode);\r\n// }\r\n\r\n\r\n// async function putSomeData() {\r\n//     let db = await idb.open('db-name', 1, upgradeDB => upgradeDB.createObjectStore('objectStoreName', { autoIncrement: true }))\r\n\r\n//     let tx = db.transaction('objectStoreName', 'readwrite')\r\n//     let store = tx.objectStore('objectStoreName')\r\n\r\n//     await store.put({ firstname: 'John', lastname: 'Doe', age: 33 })\r\n\r\n//     await tx.complete\r\n//     db.close()\r\n// }\r\n\r\n\r\n// async function getAllData() {\r\n//     let db = await idb.open('db-name', 1)\r\n\r\n//     let tx = db.transaction('objectStoreName', 'readonly')\r\n//     let store = tx.objectStore('objectStoreName')\r\n\r\n//     // add, clear, count, delete, get, getAll, getAllKeys, getKey, put\r\n//     let allSavedItems = await store.getAll()\r\n\r\n//     console.log(allSavedItems)\r\n\r\n//     db.close()\r\n// }\r\n\r\n\r\n// const setToken = (db, token) => {\r\n//     let tx = db.transaction(['authorization'], 'readwrite');\r\n//     let store = tx.objectStore('authorization');\r\n//     let tokenNote = { token: token };\r\n//     store.add(tokenNote);\r\n//     tx.oncomplete = () => {\r\n//         console.log('stored token!')\r\n//     }\r\n//     tx.onerror = (event) => {\r\n//         console.log('error storing token ' + event.target.errorCode);\r\n//     }\r\n// }\r\n\r\n// const getToken = (db) => {\r\n//     let tx = db.transaction(['authorization'], 'readonly');\r\n//     let store = tx.objectStore('authorization');\r\n//     let req = store.get('token');\r\n//     req.onsuccess = (event) => {\r\n//         let token = event.target.result;\r\n//         if (token) {\r\n//             return token\r\n//         } else {\r\n//         //   console.log(`token not found`)\r\n//         return null\r\n//         }\r\n//       }\r\n//       req.onerror = (event) => { // if user blocked to store in indexDB in browser\r\n//         console.log('error getting note' + event.target.errorCode);\r\n//       }\r\n// }\r\n\r\n// const clearToken = (db) => {\r\n//     let tx = db.transaction(['authorization'], 'readwrite');\r\n//     let store = tx.objectStore('authorization');\r\n//     const req = store.getKey('token');\r\n//     req.onsuccess = (event) => {  \r\n//         const key = req.result;\r\n//         // выполняем запрос на удаление указанной записи из хранилища объектов\r\n//         let deleteRequest = store.delete(key);\r\n//         deleteRequest.onsuccess = (event) => {\r\n//         // обрабатываем успех нашего запроса на удаление\r\n//         console.log('Delete request for token successful')\r\n//         };\r\n//     }\r\n// }\r\n\r\n// export const setAuthToken = (token) => {\r\n//     let oldToken = getToken(db)\r\n//     if(oldToken!==null){\r\n//         clearToken(db)\r\n//     }\r\n//     setToken(db, token)\r\n// }\r\n\r\n\r\n\r\n\r\n\r\nimport { openDB } from 'idb';\r\n \r\nconst dbPromise = openDB('keyval-store', 1, {\r\n  upgrade(db) {\r\n    db.createObjectStore('keyval');\r\n  },\r\n});\r\n \r\nexport const idbKeyval = {\r\n  async get(key) {\r\n    return (await dbPromise).get('keyval', key);\r\n  },\r\n  async set(key, val) {\r\n    return (await dbPromise).put('keyval', val, key);\r\n  },\r\n  async delete(key) {\r\n    return (await dbPromise).delete('keyval', key);\r\n  },\r\n  async clear() {\r\n    return (await dbPromise).clear('keyval');\r\n  },\r\n  async keys() {\r\n    return (await dbPromise).getAllKeys('keyval');\r\n  },\r\n};\r\n\r\n// idbKeyval.set('token', token)\r\n// let token = idbKeyval.get('token')","import * as axios from 'axios'\r\nimport { idbKeyval } from '../components/common/utils/indexedDB';\r\n\r\n\r\nconst instance = axios.create({\r\n    // baseURL: 'http://127.0.0.1:8000/',\r\n    baseURL: 'https://socnet97.herokuapp.com/',\r\n    headers: {\r\n        \"Content-type\": \"application/json\"\r\n      }\r\n})\r\n\r\ninstance.interceptors.request.use(\r\n    async (config) => {\r\n        // Do something before request is sent\r\n        let token = await idbKeyval.get('token')\r\n        // let token = localStorage.getItem('token') // if expired -> delete too\r\n        if (token){\r\n            config.headers[\"Authorization\"] = \"Bearer \" + token;\r\n        } else {\r\n            delete config.headers[\"Authorization\"]\r\n            // debugger\r\n        }\r\n        // console.log(config)\r\n        // debugger\r\n        return config;\r\n    },\r\n    error => {\r\n        Promise.reject(error);\r\n    }\r\n);\r\n\r\n\r\nexport const authAPI = {\r\n    me(){\r\n        return instance.get('api/auth/me/')\r\n    },\r\n    login(login, password){\r\n        console.log(login, '    ' , password)\r\n        return instance.post('api/auth/login/', {\"username\": login, \"password\": password})\r\n    },\r\n    signup(login, email, email2, password){\r\n        return instance.post('api/auth/register/', {\r\n        \"username\": login,\r\n        \"email\": email,\r\n        \"email2\": email2,\r\n        \"password\": password\r\n    })\r\n    }\r\n} \r\n\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId){\r\n        return instance.get(`api/profile/${userId}/`)\r\n    },\r\n    // проверка на то что имена переменных будут заданы соответственно с АПИ\r\n    updateProfile(profileData){ // send here an object ( auto-sized update )\r\n        // let {name=null, slug=null, status=null, photos=null, lookingForAJob=null, lookingForAJobDescription=null, fullname=null, contacts=null} = profileData\r\n        return instance.put('api/profile/', profileData)\r\n    },\r\n    deleteProfile(){ // delete self profile -> so user too\r\n        return instance.delete('api/profile/')\r\n    },\r\n    // getStatus(userId){\r\n    //     return instance.get(`api/profile/status/${userId}`)\r\n    // },\r\n    updateStatus(status){\r\n        return instance.put('api/profile/status/', {'status': status}) // like {status:status}\r\n    },\r\n    // getPhoto(userId){\r\n    //     return instance.get(`api/profile/photo/${userId}`)\r\n    // },\r\n    updatePhoto(photo){\r\n        // getHeaders()\r\n        return instance.put('api/profile/photo/', {\"photos\": photo})\r\n    }\r\n}\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, query=null){\r\n        // debugger // i dont know why i get query str -> then query==null /??????\r\n        console.log(`api/users?page=${currentPage}&q=${query}`) // dont use &count=${pageSize}\r\n        return query===null ? instance.get(`api/users?page=${currentPage}`) : instance.get(`api/users?page=${currentPage}&q=${query}`) \r\n    },\r\n    // getUser(userId){\r\n    //     return instance.get(`api/users/${userId}`)\r\n    // },\r\n    follow(userId){\r\n        // debugger\r\n        return instance.post(`api/follow/${userId}/`)\r\n    },\r\n    unfollow(userId){\r\n        return instance.delete(`api/follow/${userId}/`)\r\n    },\r\n    getfollow(userId){\r\n        return instance.get(`api/follow/${userId}/`)\r\n    }\r\n}\r\n\r\nexport const chatsAPI = {\r\n\r\n    chatPut(chatTypeId, chatId, putType, secondArgName, secondArg){\r\n        // debugger\r\n        let putData = {\"putType\": putType}\r\n        putData[secondArgName] = secondArg\r\n        return instance.put(`api/chats/${chatTypeId}/${chatId}/`, putData)\r\n    },\r\n\r\n\r\n    getChats(page, query){\r\n        return query===null ? \r\n            instance.get(`api/chats/?page=${page}`) :\r\n            instance.get(`api/chats/?page=${page}&query=${query}`)\r\n    },\r\n    createChat(snusers, name=null){ // snusers can be list of integers or integer\r\n        return name!==null ? \r\n                            instance.post('api/chats/create/', {snusers, name}) : \r\n                            instance.post('api/chats/create/', {snusers})\r\n    },\r\n    getChat(chatTypeId, chatId){ // chatTypeId = 0 - dialogs\r\n        return instance.get(`api/chats/${chatTypeId}/${chatId}/`)\r\n    },\r\n    deleteChat(chatTypeId, chatId){\r\n        return instance.delete(`api/chats/${chatTypeId}/${chatId}/`)\r\n    },\r\n    // TODO try to unify all calls below\r\n    clearChat(chatTypeId, chatId, putType, clearType){ \r\n        return this.chatPut(chatTypeId, chatId, putType, 'clearType', clearType) // 'clear'     clearType -> 'myLocal' 'myGlobal' 'allLocal' 'allGlobal' \r\n    },\r\n    renameChat(chatTypeId, chatId, putType, newChatName){ \r\n        return this.chatPut(chatTypeId, chatId, putType, 'newChatName', newChatName) // 'rename'\r\n    },\r\n    updateUnreadMsgs(chatTypeId, chatId, putType, lastGlobalReadMsgId){ // ---------------------------------------------------------------------------------------------\r\n        return this.chatPut(chatTypeId, chatId, putType, 'lastGlobalReadMsgId', lastGlobalReadMsgId) // 'updateUnreadMsgs'\r\n    },\r\n    // for conv only\r\n    toogleMemberStatusForConversation(chatTypeId, chatId, putType, userId){  // 'toogleMemberStatus'\r\n        return this.chatPut(chatTypeId, chatId, putType, 'userId', userId)\r\n    },\r\n    addMemberForConversation(chatTypeId, chatId, putType, userId){  // 'addMember'\r\n        return this.chatPut(chatTypeId, chatId, putType, 'userId', userId)\r\n    },\r\n    removeMemberFromConversation(chatTypeId, chatId, putType, userId){  // 'removeMember'\r\n        return this.chatPut(chatTypeId, chatId, putType, 'userId', userId)\r\n    },\r\n    removeMemberMsgsForConversation(chatTypeId, chatId, putType, userId){  // 'removeMemberMsgs'\r\n        return this.chatPut(chatTypeId, chatId, putType, 'userId', userId)\r\n    },\r\n    removeOneMemberMsgForConversation(chatTypeId, chatId, putType, userId){  // 'removeOneMemberMsg'\r\n        return this.chatPut(chatTypeId, chatId, putType, 'userId', userId)\r\n    },\r\n\r\n    setChatPhoto(chatTypeId, chatId, putType, newChatPhoto){ // putType = setChatPhoto // 'setChatPhoto'\r\n        return this.chatPut(chatTypeId, chatId, putType, 'newChatPhoto', newChatPhoto)\r\n    },\r\n\r\n    //messages\r\n    getMessages(chatTypeId, chatId, readFromIndex, readFromIndexBefore, query, numOfDeletedMsgs){\r\n        // console.log(query)\r\n        return  numOfDeletedMsgs === null ?\r\n            query===null ?\r\n            instance.get(`api/chats/${chatTypeId}/${chatId}/messages/?readFromIndex=${readFromIndex}&readFromIndexBefore=${readFromIndexBefore}`) :\r\n            instance.get(`api/chats/${chatTypeId}/${chatId}/messages/?readFromIndex=${readFromIndex}&readFromIndexBefore=${readFromIndexBefore}&query=${query}`) \r\n            :\r\n            query===null ?\r\n            instance.get(`api/chats/${chatTypeId}/${chatId}/messages/?readFromIndex=${readFromIndex}&readFromIndexBefore=${readFromIndexBefore}&numOfDeletedMsgs=${numOfDeletedMsgs}`) :\r\n            instance.get(`api/chats/${chatTypeId}/${chatId}/messages/?readFromIndex=${readFromIndex}&readFromIndexBefore=${readFromIndexBefore}&query=${query}&numOfDeletedMsgs=${numOfDeletedMsgs}`) \r\n            // instance.get(`api/chats/${chatTypeId}/${chatId}/messages/?page=${page}`) :\r\n            // instance.get(`api/chats/${chatTypeId}/${chatId}/messages/?page=${page}&query=${query}`)\r\n    },\r\n    createMessage(chatTypeId, chatId, messageBody, fileId=null){\r\n        // console.log({messageBody, fileId})\r\n        return instance.post(`api/chats/${chatTypeId}/${chatId}/messages/create/`, {messageBody, fileId})\r\n    },\r\n\r\n\r\n    // uploadFile(file){\r\n    //     let formData = new FormData();\r\n    //     formData.append(\"file\", file);\r\n    //     return instance.post(`api/file/`, formData, {\r\n    //         headers: {\r\n    //             \"Content-Type\": \"multipart/form-data\",\r\n    //           }\r\n    //         //   ,\r\n    //         //   onUploadProgress,\r\n    //     })\r\n    // },\r\n\r\n    // can ask for files only from current chat to load \r\n    getFile( fileId ) {\r\n        return instance.get(`api/files/${fileId}`);\r\n    },\r\n    // downloadFile(filePath) {\r\n    //     return instance.get(`media/${filePath}`);\r\n    // },\r\n\r\n\r\n    // may just change it to json file:blob\r\n    // uploadFile( file ){\r\n    //     let formData = new FormData();\r\n    //     formData.append(\"file\", file);\r\n    //     return instance.post(`api/files/`, formData, {\r\n    //         headers: {\r\n    //             \"Content-Type\": \"multipart/form-data\",\r\n    //           }\r\n    //     })\r\n    // },\r\n    uploadFile( fileURL, fileName ){\r\n        return instance.post(`api/files/`, {fileURL, fileName})\r\n    },\r\n    // TIP there is problems\r\n    // uploadFile( file, onUploadProgress ){\r\n    //         let formData = new FormData();\r\n    //         formData.append(\"file\", file);\r\n    //         return instance.post(`api/files/`, formData, {\r\n    //             headers: {\r\n    //                 \"Content-Type\": \"multipart/form-data\",\r\n    //               }\r\n    //               ,\r\n    //               onUploadProgress,\r\n    //         })\r\n    //     },\r\n\r\n\r\n    editMessage(chatTypeId, chatId, messageId, newMessageBody){\r\n        // debugger\r\n        console.log(`api/chats/${chatTypeId}/${chatId}/messages/${messageId}/`)\r\n        console.log({newMessageBody})\r\n        return instance.put(`api/chats/${chatTypeId}/${chatId}/messages/${messageId}/`, {newMessageBody})\r\n    },\r\n    deleteMessage(chatTypeId, chatId, messageId){\r\n        return instance.delete(`api/chats/${chatTypeId}/${chatId}/messages/${messageId}/`)\r\n    },\r\n}\r\n\r\n// if there is no yet msgs\r\n// looks like there is no messages in chat yet\r\n// MyConversationMessage has no globalMsg.\r\n// looks like there is no messages in chat yet\r\n// MyConversationMessage has no globalMsg.","// // import Axios from 'axios';\r\n\r\nimport { usersAPI } from \"../api/api\";\r\n\r\n// // let sendSignUpRequest = (username, email, email2, password) => {\r\n// //     // no obtained tokens ( cause only register // not login )\r\n// //     let signup_data =\r\n// //     {\r\n// //         \"username\": username,\r\n// //         \"email\": email,\r\n// //         \"email2\": email2,\r\n// //         \"password\": password\r\n// //     }\r\n// //     // link // data // config {headers} == 0\r\n// //     Axios.post(`http://127.0.0.1:8000/api/auth/register/`, signup_data).then(response => {\r\n// //         console.log(response.data);\r\n// //         return response.data;\r\n// //         // return { \"username\": response.data.username, \"email\": response.data.email};\r\n\r\n// //     }).catch(function (error) { // errror impossible // cause always positive answers with status_code 200_ok\r\n// //         console.log(error);\r\n// //         return {};\r\n// //     });\r\n// //     // we always can handle email and username from response.data and error.data from \r\n// //     }\r\n\r\n// // let sendIsLoginRequest = (token) => {\r\n// //     let config = {\r\n// //         headers: {\r\n// //             'Authorization': 'Bearer ' + token\r\n// //           }\r\n// //         }\r\n// //     // link // data // config {headers} == 0\r\n// //     Axios.post(`http://127.0.0.1:8000/api/auth/me/`, config).then(response => {\r\n// //         console.log(response.data);\r\n// //         return response.data;\r\n\r\n// //     }).catch(function (error) {\r\n// //         console.log(error);\r\n// //         return {};\r\n// //     });\r\n// //     }\r\n\r\n// // let sendLoginRequest = (username,  password) => {\r\n// //     let login_data =\r\n// //     {\r\n// //         \"username\": username,\r\n// //         \"password\": password\r\n// //     }\r\n// //     // link // data // config {headers} == 0\r\n// //     return Axios.post(`http://127.0.0.1:8000/api/auth/login/`, login_data);\r\n// //     }\r\n\r\n// import Cookies from 'js-cookie';\r\n\r\n// const SIGNUP = 'SIGNUP';\r\n// const LOGIN = 'LOGIN';\r\n// // const IS_LOGIN = 'IS_LOGIN';\r\n\r\n// const SET_USERNAME = 'SET_USERNAME';\r\n// const SET_EMAIL = 'SET_EMAIL';\r\n// const SET_EMAIL2 = 'SET_EMAIL2';\r\n// const SET_PASSWORD = 'SET_PASSWORD';\r\n\r\n// const TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\r\n// const SET_REDIRECT_LOGIN = 'SET_REDIRECT';\r\n// const SET_REDIRECT_SIGNUP = 'SET_REDIRECT_SIGNUP';\r\n// const SET_REDIRECT_LOGOUT = 'SET_REDIRECT_LOGOUT'; \r\n\r\n// const DROP_STATE = 'DROP_STATE';\r\n\r\n// // const SET_COOKIES = 'SET_COOKIES';\r\n\r\n// let initialState = {\r\n//     // auth data ( that will be nulled after operation )\r\n//     username: '',\r\n//     email: '',\r\n//     email2: '',\r\n//     password: '',\r\n//     // resident data \r\n//     token: Cookies.get('token') || null,\r\n//     userId: Cookies.get('userId') || null,\r\n\r\n//     // invalidSignUpData: false, // signup // not appropriate data (or not all data)\r\n//     // invalidLoginData: false, // login // not appropriate data (or not all data)\r\n\r\n//     // userAlreadyExists: false, // signup //  unique field email or username wasnt passed\r\n//     // mailAlreadyRegistered: false, // signup //  unique field email or username wasnt passed\r\n//     // // isFetching: true,\r\n//     // fatalError: false\r\n//     errorMessage: null,\r\n\r\n//     isFetching: false,\r\n//     redirect_login: null,\r\n//     redirect_signup: null,\r\n//     redirect_logout: null\r\n// };\r\n\r\n\r\n// const authReducer = (state = initialState, action) => {\r\n\r\n//     switch(action.type) {\r\n//         case DROP_STATE:\r\n//             return {\r\n//                 ...state,\r\n//                 username: '',\r\n//                 email: '',\r\n//                 email2: '',\r\n//                 password: '',\r\n//                 token: null,\r\n//                 userId: null,\r\n//                 errorMessage: null,\r\n//                 isFetching: false,\r\n//                 redirect_login: null,\r\n//                 redirect_signup: null,\r\n//                 redirect_logout: null\r\n//             }\r\n\r\n//         case SET_USERNAME:\r\n//             return { ...state, username: action.username}\r\n//         case SET_EMAIL:\r\n//             return { ...state, email: action.email}\r\n//         case SET_EMAIL2:\r\n//             return { ...state, email2: action.email2}\r\n//         case SET_PASSWORD:\r\n//             return { ...state, password: action.password}\r\n\r\n\r\n\r\n//         // case SIGNUP:\r\n//         //     {\r\n//         //     let response = sendSignUpRequest(state.username, state.email, state.email2, state.password);\r\n//         //     if ('username' in response && 'email' in response){\r\n//         //         if (!Array.isArray(response.username) && !Array.isArray(response.email)){\r\n//         //             return { ...state, username: '', email: '', email2: '', password: '', errorMessage: null}; // чтобы не хранить в стейте постоянно все данные кроме токена (который получим потом)\r\n//         //         }\r\n//         //     }\r\n//         //     // can contain username and email or both\r\n//         //     // Оператор опциональной последовательности ?.\r\n//         //     return { ...state, errorMessage: {username: response.username?.[0], email: response.email?.[0]}}; // it will just undef if there is no email or no username\r\n//         //     }\r\n\r\n\r\n//             // if ('username' in response && 'email' in response){\r\n//             //     if (!Array.isArray(response.username) && !Array.isArray(response.email)){\r\n//             //         return { ...state, invalidSignUpData: false, userAlreadyExists: false, mailAlreadyRegistered: false, fatalError: false }; // обнулим все ерроры шоб можно было перейти на логин\r\n//             //     } else if (Array.isArray(response.username) && Array.isArray(response.email)){\r\n//             //         return { ...state, userAlreadyExists: true, mailAlreadyRegistered: true };\r\n//             //     } else {\r\n//             //         return { ...state, fatalError: true }; // cannot be one field str and another list\r\n//             //     }\r\n//             // } else if ('username' in response){\r\n//             //     if (Array.isArray(response.username)){\r\n//             //         // that means that this is an error message only in username\r\n//             //         return { ...state, userAlreadyExists: true };\r\n//             //     } else {\r\n//             //         return { ...state, fatalError: true }; // cannot be only username in positive signup return\r\n//             //     }\r\n//             // } else if ('email' in response){\r\n//             //     if (Array.isArray(response.email)){\r\n//             //         // that means that this is an error message only in email\r\n//             //         return { ...state, mailAlreadyRegistered: true };\r\n//             //     } else {\r\n//             //         return { ...state, fatalError: true }; // cannot be only email in positive signup return\r\n//             //     }\r\n//             // } else {\r\n//             //     return { ...state, fatalError: true };\r\n//             // }\r\n//         case SIGNUP:\r\n//             {\r\n//                 // if \r\n//                 // let send = sendLoginRequest(state.username, state.password);\r\n//                 if (action.errorMessage === null){\r\n//                     return { ...state, email: '', email2: '', errorMessage: action.errorMessage, username: '', password: '' }; //  зануляем еррор и кредишнлс\r\n//                 } else {\r\n//                     return { ...state, errorMessage: action.errorMessage }; //  зануляем токен и юзер ид\r\n//                 }\r\n//             }\r\n//         case LOGIN:\r\n//             {\r\n//                 if (action.errorMessage === null){\r\n//                     return { ...state, token: action.token, userId: action.userId, errorMessage: action.errorMessage, username: '', password: '' }; //  зануляем еррор и кредишнлс\r\n//                 } else {\r\n//                     return { ...state, token: action.token, userId: action.userId, errorMessage: action.errorMessage }; //  зануляем токен и юзер ид\r\n//                 }\r\n//             }\r\n//         case TOGGLE_IS_FETCHING:\r\n//             return {...state, isFetching: action.isFetching}\r\n//         case SET_REDIRECT_LOGIN:\r\n//             return {...state, redirect_login: action.redirect_login}\r\n//         case SET_REDIRECT_SIGNUP:\r\n//                 return {...state, redirect_signup: action.redirect_signup}\r\n//         case SET_REDIRECT_LOGOUT:\r\n//                     return {...state, redirect_logout: action.redirect_logout}\r\n//         default:\r\n//             return state;\r\n//     }\r\n// }\r\n\r\n\r\n// export const signup = (errorMessage) => ({type: SIGNUP, errorMessage});\r\n// export const login = (token, userId, errorMessage) => ({type: LOGIN, token, userId, errorMessage});\r\n\r\n\r\n\r\n// export const setUsername = (username) => ({type: SET_USERNAME, username});\r\n// export const setEmail = (email) => ({type: SET_EMAIL, email});\r\n// export const setEmail2 = (email2) => ({type: SET_EMAIL2, email2});\r\n// export const setPassword = (password) => ({type: SET_PASSWORD, password});\r\n\r\n// export const toggleIsFetching = (isFetching) => ({type: TOGGLE_IS_FETCHING, isFetching});\r\n\r\n// export const setRedirectLogin = (redirect_login) => ({type: SET_REDIRECT_LOGIN, redirect_login});\r\n// export const setRedirectSignUp = (redirect_signup) => ({type: SET_REDIRECT_SIGNUP, redirect_signup});\r\n\r\n// export const setRedirectLogout = (redirect_logout) => ({type: SET_REDIRECT_LOGOUT, redirect_logout});\r\n\r\n\r\n// export const dropState = () => ({type: DROP_STATE});\r\n\r\n\r\n// export default authReducer;\r\n\r\n\r\n// // email // email2 // password\r\n\r\n\r\nimport {authAPI} from \"../api/api\";\r\nimport { stopSubmit } from \"redux-form\";\r\nimport { idbKeyval } from \"../components/common/utils/indexedDB\";\r\n\r\nconst SET_USER_DATA = 'my-app/auth/SET_USER_DATA';\r\n\r\n\r\nlet initialState = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    // tokenError: false\r\n};\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const setAuthUserData = (userId, email, login, isAuth) => ({type: SET_USER_DATA, payload:{userId, email, login, isAuth}})\r\n\r\nlet destructAUD = (data) => {\r\n    // debugger\r\n    return [data.userId, data.email, data.login]\r\n}\r\nlet dispatchSAUD = (dispatch, data, isAuth=true) => {\r\n    return dispatch(setAuthUserData(...destructAUD(data), isAuth))\r\n}\r\n\r\n\r\nexport const getAuthUserData = () => async(dispatch) => {\r\n    let response = await authAPI.me()\r\n    // debugger\r\n    if(\"detail\" in response.data){\r\n        if([\"Signature has expired.\", \"Error decoding signature.\", \"Invalid Authorization header. No credentials provided.\"].includes(response.data.detail)){\r\n            console.log(response.data.detail)\r\n            // dispatch(setAuthUserData(null, null, null, false, true))\r\n        } else {\r\n            console.log('its amaizing error - server error')\r\n        }\r\n    } else {\r\n        if(response.data.resultCode === 0){\r\n            dispatchSAUD(dispatch, response.data.data)\r\n        }\r\n    }\r\n    return response\r\n}\r\n\r\nexport const login = (login, password) => async(dispatch) => {\r\n    // console.log(login)\r\n    // console.log(password)\r\n    // delete localStorage['token']\r\n    await idbKeyval.delete('token')\r\n    let response = await authAPI.login(login, password)\r\n    if (response.data.resultCode === 0){\r\n        // console.log('3')\r\n        // localStorage.setItem('token', response.data.data.token)\r\n        await idbKeyval.set('token', response.data.data.token)\r\n        // localStorage.setItem('userId', response.data.data.userId)\r\n        // console.log('4')\r\n        dispatchSAUD(dispatch, response.data.data) // here we set user auth data ( but we dont call any api calls with token yet)\r\n        // console.log('5')\r\n    } else {\r\n        let message = response.data.messages.length  ? response.data.messages[0] : 'Some error';\r\n        dispatch(stopSubmit(\"login\", {_error: message}));\r\n    }\r\n}\r\n\r\n// or async type????\r\nexport const logout = () => async(dispatch) => {\r\n    // we just cant logout from API server ( we can do this on frontend by deleting our localStorage TOKEN  - thats all folks)\r\n    // localStorage.setItem('token', null)\r\n    // delete localStorage['token']\r\n    await idbKeyval.delete('token')\r\n    // delete localStorage['userId']\r\n    // localStorage.setItem('userId', null)\r\n    dispatch(setAuthUserData(null, null, null, false, false))\r\n}\r\n\r\nexport const signup = (login, password) => async(dispatch) => {\r\n    let response = await authAPI.signup(login, password)\r\n    if (response.data.resultCode !== 0){\r\n        let message = response.data.messages.length  ? response.data.messages[0] : 'Some error';\r\n        dispatch(stopSubmit(\"signup\", {_error: message}));\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default authReducer","import React from 'react';\r\n// import Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\n\r\nimport s from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Header = (props) => {\r\n    return <header className={s.header}>\r\n        <img src='https://www.freelogodesign.org/Content/img/logo-ex-7.png' />\r\n\r\n        { props.isAuth ? \r\n        <div className={s.loginBlock}>{props.login} - <a onClick={props.logout}>Logout</a></div>\r\n                        : \r\n        <div className={s.loginBlock}><NavLink to={'/login'}>Login</NavLink></div> \r\n        }\r\n    \r\n\r\n    </header>\r\n}\r\n\r\n// export default Header;\r\n\r\n\r\nclass HeaderContainer extends React.Component {\r\n    // componentDidMount() {\r\n    //   this.props.getAuthUserData();\r\n    // }\r\n\r\n    render() {\r\n        return <Header {...this.props} />\r\n    }\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    login: state.auth.login,\r\n    isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport default connect(mapStateToProps, {logout})(HeaderContainer);","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/chats\" activeClassName={s.activeLink}>Chats</NavLink>\r\n            </div>\r\n            {/* <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <a>News</a>\r\n            </div>\r\n            <div className={s.item}>\r\n                <a>Music</a>\r\n            </div>\r\n            <div className={s.item}>\r\n                <a>Settings</a>\r\n            </div> */}\r\n\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/login\" activeClassName={s.activeLink}>Login</NavLink>\r\n            </div>\r\n            {/* <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/logout\" activeClassName={s.activeLink}>Logout</NavLink>\r\n            </div> */}\r\n\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n    userId: state.auth.userId\r\n});\r\n\r\nconst withAuthRedirect = (WrappedComponent) =>  {\r\n\r\n    class RedirectComponent extends React.Component{\r\n        // constructor(props){\r\n        //     super(props);\r\n        // }\r\n        render() {\r\n            // debugger\r\n            if (!this.props.isAuth) return <Redirect to='/login' />\r\n            return <WrappedComponent {...this.props} />\r\n        }\r\n    }\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n}\r\n\r\nexport default withAuthRedirect;\r\n\r\n// export default connect(mapStateToPropsForRedirect)(withAuthRedirect);","const replaceQuotes = (string) => {\r\n    // debugger\r\n    string = JSON.parse(string.replace(/'/g, '\"'));\r\n    return string;\r\n};\r\nexport default replaceQuotes","import { chatsAPI, usersAPI } from \"../api/api\";\r\nimport { stopSubmit } from \"redux-form\";\r\nimport replaceQuotes from \"../components/common/utils/quotes\";\r\nimport { idbKeyval } from \"../components/common/utils/indexedDB\";\r\n\r\nconst SET_CHATS = 'SET_CHATS';\r\nconst SET_CHATS_ALIAS_MAP = 'SET_CHATS_ALIAS_MAP';\r\nconst SET_MESSAGES = 'SET_MESSAGES';\r\nconst SET_CURRENT_CHAT_DATA = 'SET_CURRENT_CHAT_DATA';\r\nconst EDIT_MESSAGE = 'EDIT_MESSAGE';\r\n\r\nconst CURRENT_CHAT_DATA_FETCHING = 'CURRENT_CHAT_DATA_FETCHING';\r\nconst TOOGLE_IS_UNMOUNT = 'TOOGLE_IS_UNMOUNT';\r\n\r\n// const ADD_USERS_TO_SELECT = 'ADD_USERS_TO_SELECT'\r\nconst SET_CURRENT_CHAT_MEMBERS ='SET_CURRENT_CHAT_MEMBERS'\r\nconst SET_CURRENT_CHAT_PHOTO = 'SET_CURRENT_CHAT_PHOTO'\r\nconst SET_CURRENT_CHAT_NAME = 'SET_CURRENT_CHAT_NAME'\r\n\r\n\r\n// const SET_READ_FROM_INDEX = 'SET_READ_FROM_INDEX'\r\n// const SET_READ_FROM_INDEX_NEXT = 'SET_READ_FROM_INDEX_NEXT'\r\nconst SET_READ_FROM_INDEXES = 'SET_READ_FROM_INDEXES'\r\n// const SET_LOADING_ON_SCROLL = 'SET_LOADING_ON_SCROLL'\r\nconst SET_FETCHING_MSGS = 'SET_FETCHING_MSGS'\r\n\r\n// const SET_OLD_MSGS_DOWNLOAD = 'SET_OLD_MSGS_DOWNLOAD'\r\n\r\n// const SET_FIRST_OF_LAST_SET_MSGS_ID = 'SET_FIRST_OF_LAST_SET_MSGS_ID'\r\n// const SET_FIRST_OF_SET_MSGS_ID = 'SET_FIRST_OF_SET_MSGS_ID'\r\n\r\n// const SET_FIRST_AND_LAST_OF_SET_MSGS_ID = 'SET_FIRST_AND_LAST_OF_SET_MSGS_ID'\r\n// const SET_PREFETCH_CC = 'SET_PREFETCH_CC'\r\n// const ADD_FILE_AS_LOADING = 'ADD_FILE_AS_LOADING'\r\n// const REMOVE_FILE_AS_LOADING = 'REMOVE_FILE_AS_LOADING'\r\n\r\nconst SHOULD_WINDOW_SCROLL_DOWN = 'SHOULD_WINDOW_SCROLL_DOWN'\r\nconst SET_MESSAGE_CREATING = 'SET_MESSAGE_CREATING'\r\nconst SET_REFRESH_AFTER_MESSAGE_CREATING = 'SET_REFRESH_AFTER_MESSAGE_CREATING'\r\n\r\n\r\n// // const SET_REFRESH_AFTER_DM = 'SET_REFRESH_AFTER_DM' \r\nconst INC_NUM_OF_DELETED_MSGS = 'INC_NUM_OF_DELETED_MSGS'\r\nconst NULL_NUM_OF_DELETED_MSGS = 'NULL_NUM_OF_DELETED_MSGS'\r\n\r\n\r\nlet initialState = {\r\n    chatId: null,\r\n    chatTypeId: null,\r\n    chatsAliases: [],\r\n    messages: [],\r\n    chats: [], //  \"dialogs\": [{\"id\": 1,\"name\": \"Mexus_1\"}],\"conversations\": [{ \"id\": 1,\"name\": \"HERE WE GO AGAIN\" }]\r\n    // messages: [], \r\n    // newMessageBody: \"\"\r\n    currentChat: null, // + 'readFromIndex'\r\n    isFetching: false,\r\n    isUnmount: false,\r\n\r\n    // usersToSelect: [],\r\n\r\n    membersToSelect: [],\r\n\r\n    readFromIndex: null,\r\n    readFromIndexNext: null,\r\n    readFromIndexBefore: null,\r\n    // loadingOnScroll: true,\r\n    IsFetchingMsgs: false,\r\n    loadingFilesIds: [],\r\n\r\n    // oldMsgsDonwload: false,\r\n\r\n    // firstOfLastSetOfMsgsId: null,\r\n    // firstOfSetOfMsgsId: null,\r\n\r\n\r\n    windowScrollOnMsgCreate: false,\r\n    // preFetchCC: false,\r\n    isMessageCreating: false,\r\n\r\n    isRefreshedAfterMC: false,\r\n\r\n    // isRefreshedAfterDM: false,\r\n    numOfDeletedMsgs: 0,\r\n};\r\n\r\n\r\nconst chatsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n\r\n        case INC_NUM_OF_DELETED_MSGS: {\r\n            let nodm = state.numOfDeletedMsgs + 1\r\n            return {...state, numOfDeletedMsgs: nodm} // SET_NUM_OF_DELETED_MSGS\r\n        }\r\n        case NULL_NUM_OF_DELETED_MSGS: {\r\n            let nodm = 0\r\n            return {...state, numOfDeletedMsgs: nodm} // SET_NUM_OF_DELETED_MSGS\r\n        }\r\n\r\n\r\n\r\n        case SET_CHATS: {\r\n            return {...state, chats: action.chats} //\r\n        }\r\n        case SET_CHATS_ALIAS_MAP: {\r\n            return {...state, chatsAliases: action.chatsAliases}\r\n        }\r\n        case SET_MESSAGES: {\r\n            return {...state, messages: action.messages}\r\n        }\r\n        case SET_CURRENT_CHAT_DATA: {\r\n            return {...state, chatId: action.chatId, chatTypeId: action.chatTypeId, currentChat: action.currentChat}\r\n        }\r\n        case TOOGLE_IS_UNMOUNT: {\r\n            return {...state, isUnmount: action.isUnmount}\r\n        }\r\n\r\n        case CURRENT_CHAT_DATA_FETCHING: {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n\r\n        case SET_CURRENT_CHAT_MEMBERS: {\r\n            return {...state, currentChat: {...state.currentChat, members: action.members}}\r\n        }\r\n        case SET_CURRENT_CHAT_NAME: {\r\n            return {...state, currentChat: {...state.currentChat, name: action.name}}\r\n        }\r\n        case SET_CURRENT_CHAT_PHOTO: {\r\n            return {...state, currentChat: {...state.currentChat, chatPhoto: action.chatPhoto}}\r\n        }\r\n\r\n        // case SET_READ_FROM_INDEX: {\r\n        //     return {...state, readFromIndex: action.readFromIndex}\r\n        // }\r\n        // case SET_READ_FROM_INDEX_NEXT: {\r\n        //     return {...state, readFromIndexNext: action.readFromIndexNext}\r\n        // }\r\n\r\n        case SET_READ_FROM_INDEXES: {\r\n            return {...state, readFromIndex: action.readFromIndex, readFromIndexNext: action.readFromIndexNext, readFromIndexBefore: action.readFromIndexBefore}  \r\n        }\r\n        // case SET_LOADING_ON_SCROLL: {\r\n        //     return {...state, loadingOnScroll: action.loadingOnScroll}\r\n        // }\r\n        case SET_FETCHING_MSGS : {\r\n            return {...state, IsFetchingMsgs: action.IsFetchingMsgs} \r\n        }\r\n\r\n        // case SET_OLD_MSGS_DOWNLOAD: {\r\n        //     return {...state, oldMsgsDonwload: action.oldMsgsDonwload}\r\n        // }\r\n\r\n\r\n        // case SET_FIRST_AND_LAST_OF_SET_MSGS_ID: {\r\n        //     return {...state, firstOfSetOfMsgsId: action.firstOfSetOfMsgsId, firstOfLastSetOfMsgsId: action.firstOfLastSetOfMsgsId}\r\n        // }\r\n\r\n        case SHOULD_WINDOW_SCROLL_DOWN : {\r\n            return {...state, windowScrollOnMsgCreate: action.windowScrollOnMsgCreate} \r\n        }\r\n\r\n        // case SET_FIRST_OF_SET_MSGS_ID: {\r\n        //     return {...state, firstOfSetOfMsgsId: action.firstOfSetOfMsgsId}\r\n        // }\r\n\r\n        // case SET_FIRST_OF_LAST_SET_MSGS_ID: {\r\n        //     return {...state, firstOfLastSetOfMsgsId: action.firstOfLastSetOfMsgsId}\r\n        // }\r\n\r\n        case SET_MESSAGE_CREATING : {\r\n            return {...state, isMessageCreating: action.isMessageCreating} \r\n        }\r\n        case SET_REFRESH_AFTER_MESSAGE_CREATING: {\r\n            return {...state, isRefreshedAfterMC: action.isRefreshedAfterMC} \r\n        }\r\n        // case SET_REFRESH_AFTER_DM: {\r\n        //     return {...state, isRefreshedAfterDM: action.isRefreshedAfterDM} \r\n        // }\r\n        // case SET_PREFETCH_CC : {\r\n        //     return {...state, preFetchCC: action.preFetchCC}\r\n        // }\r\n        // case ADD_USERS_TO_SELECT: {\r\n        //     return {...state, usersToSelect: action.usersToSelect}\r\n        // }\r\n\r\n        // case ADD_FILE_AS_LOADING: {\r\n        //     return {...state, loadingFilesIds: action.fileId}\r\n        // }\r\n        // case REMOVE_FILE_AS_LOADING: {\r\n        //     return {...state, loadingFilesIds: action.fileId} // delete from list of loading and then add url of file to download ( if photo to <img src='api/file/{fileId}'> else only url <a href='api/file/{fileId}')\r\n        // }\r\n\r\n        case EDIT_MESSAGE: {\r\n            return {...state, messages: state.messages.map(msg => (msg.id === action.messageId ? { ...msg, body: action.newMessageBody} : msg) ) }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const setCurrentChatMembers = (members) => ({type: SET_CURRENT_CHAT_MEMBERS, members})\r\nexport const setCurrentChatName = (name) => ({type: SET_CURRENT_CHAT_NAME, name})\r\nexport const setCurrentChatPhoto = (chatPhoto) => ({type: SET_CURRENT_CHAT_PHOTO, chatPhoto})\r\n\r\n\r\n\r\nexport const setCurrentChatIdsToStore = (chatTypeId, chatId, currentChat) => ({type: SET_CURRENT_CHAT_DATA, chatId, chatTypeId, currentChat})\r\n\r\nexport const currentChatDataFetching = (isFetching) => ({type: CURRENT_CHAT_DATA_FETCHING, isFetching})\r\n\r\nexport const toogleIsUnmount = (isUnmount) => ({type: TOOGLE_IS_UNMOUNT, isUnmount})\r\n\r\n\r\n\r\n// export const addUsersToSelect = (usersToSelect) => ({type: ADD_USERS_TO_SELECT, usersToSelect})\r\n\r\n\r\n\r\n// export const requestUsersForChat = () => async(dispatch) => {\r\n//     // let result = []\r\n//     // let error = false//{data:{resultCode:0}}\r\n//     // let page = 1 \r\n//     // debugger\r\n//     // do\r\n//     // {\r\n//     //     let response = await usersAPI.getUsers(page);\r\n//     //     debugger\r\n//     //     console.log(response)\r\n//     //     if(response.data.resultCode!==0){\r\n//     //         debugger\r\n//     //         // result.push({'photos': (replaceQuotes(response.data.data.photos)).small,  \"userId\": response.data.data.userId,  'name': response.data.data.name})\r\n//     //         result.push({\"userId\": response.data.data.userId,  'name': response.data.data.name})\r\n//     //         page++;\r\n//     //     } else {\r\n//     //         error = true;\r\n//     //     }\r\n//     // } while(!error)\r\n//     // debugger\r\n//     let response = await usersAPI.getUsers(1);\r\n//     let result = []\r\n//     // debugger\r\n//     if(response.data.users.error===null){\r\n//         // debugger\r\n//         // result.push({'photos': (replaceQuotes(response.data.data.photos)).small,  \"userId\": response.data.data.userId,  'name': response.data.data.name})\r\n//         result = response.data.users.items.map(user => ({\"userId\": user.userId,  'name': user.name}))\r\n//         // page++;\r\n//     }\r\n//     dispatch(addUsersToSelect(result))\r\n// }\r\n\r\nexport const setChats = (chats) => ({type: SET_CHATS, chats})\r\nexport const setMessages = (messages) => ({type: SET_MESSAGES, messages})\r\nexport const editMessage = (messageId, newMessageBody) => ({type: EDIT_MESSAGE, messageId, newMessageBody})\r\n\r\n\r\nexport const setChatsAliasMap = (chatsAliases) => ({type: SET_CHATS_ALIAS_MAP, chatsAliases})\r\n\r\n\r\n// export const setReadFromIndexMsgs = (readFromIndex) => ({type: SET_READ_FROM_INDEX, readFromIndex}) \r\n// export const setReadFromIndexNextMsgs = (readFromIndexNext) => ({type: SET_READ_FROM_INDEX_NEXT, readFromIndexNext}) \r\n\r\nexport const setReadFromIndexes = (readFromIndex, readFromIndexNext, readFromIndexBefore) => ({type: SET_READ_FROM_INDEXES, readFromIndex, readFromIndexNext, readFromIndexBefore}) \r\n\r\n\r\n// export const setLoadingOnScroll = (loadingOnScroll) => ({type: SET_LOADING_ON_SCROLL, loadingOnScroll})\r\nexport const setFetchingMoreMsgs = (IsFetchingMsgs) => ({type: SET_FETCHING_MSGS, IsFetchingMsgs})\r\n\r\n// export const setOldMsgsDonwload = (oldMsgsDonwload) =>({type: SET_OLD_MSGS_DOWNLOAD, oldMsgsDonwload})\r\n\r\n\r\n// export const setFirsANDLastSetOfMsgsId = (firstOfSetOfMsgsId, firstOfLastSetOfMsgsId) =>({type: SET_FIRST_AND_LAST_OF_SET_MSGS_ID, firstOfSetOfMsgsId, firstOfLastSetOfMsgsId})\r\n\r\n\r\n\r\nexport const shouldWindowScrollDown =  (windowScrollOnMsgCreate) => ({type: SHOULD_WINDOW_SCROLL_DOWN, windowScrollOnMsgCreate})\r\n// export const setFirstOfSetOfMsgsId = (firstOfSetOfMsgsId) =>({type: SET_FIRST_OF_SET_MSGS_ID, firstOfSetOfMsgsId})\r\n// export const setFirstOfLastSetOfMsgsId = (firstOfLastSetOfMsgsId) =>({type: SET_FIRST_OF_LAST_SET_MSGS_ID, firstOfLastSetOfMsgsId})\r\nexport const setMessageCreating = (isMessageCreating) => ({type: SET_MESSAGE_CREATING, isMessageCreating})\r\nexport const setRefreshMessageCreating = (isRefreshedAfterMC) => ({type: SET_REFRESH_AFTER_MESSAGE_CREATING, isRefreshedAfterMC})\r\n\r\nexport const incNumOfDeletedMsgs = () => ({type: INC_NUM_OF_DELETED_MSGS})\r\nexport const nullNumOfDeletedMsgs = () => ({type: NULL_NUM_OF_DELETED_MSGS})\r\n\r\n// export const setRefreshAfterDM = (isRefreshedAfterDM) => ({type: SET_REFRESH_AFTER_DM, isRefreshedAfterDM})\r\n// export const setPreFetchCC = (preFetchCC) => ({type: SET_PREFETCH_CC, preFetchCC})\r\n\r\n// export const addFileAsLoading = (fileId) => ({type: ADD_FILE_AS_LOADING, fileId}) \r\n// export const removeFileAsLoading = (fileId) => ({type: REMOVE_FILE_AS_LOADING, fileId}) \r\n\r\n\r\n\r\n// export const fetchMoreOldMsgs = (chatTypeId, chatId, readFromIndexNext, firstOfSetOfMsgsId ) => async(dispatch) => { \r\n//     await dispatch(getMessages(chatTypeId, chatId, readFromIndexNext, firstOfSetOfMsgsId ))\r\n//     // dispatch(setOldMsgsDonwload(false))\r\n// }\r\n\r\nexport const setCurrentChatData = (chatTypeId, chatId) => (dispatch) =>{\r\n    dispatch(currentChatDataFetching(true))\r\n    localStorage.setItem('chatTypeId', chatTypeId)\r\n    localStorage.setItem('chatId', chatId)\r\n    dispatch(currentChatDataFetching(false))\r\n}\r\n\r\nexport const unSetCurrentChatData = () => (dispatch) =>{\r\n    delete localStorage['chatId']\r\n    delete localStorage['chatTypeId']\r\n    dispatch(setCurrentChatIdsToStore(null, null, null))\r\n}\r\n\r\n\r\n// const checkOnScrollTop = (response, readFromIndex, dispatch) => {\r\n//     if(response.data.resultCode === 0){\r\n//         if(response.data.data.readFromIndexNext === readFromIndex){\r\n//             dispatch(setLoadingOnScroll(false)) // if scrolled to the top - infinity scroll stop\r\n//         }\r\n//         dispatch(setReadFromIndexMsgs(readFromIndex))\r\n//         dispatch(setReadFromIndexNextMsgs(response.data.data.readFromIndexNext))\r\n//     }\r\n// }\r\n\r\n\r\nexport const getCurrentChatData = () => async(dispatch) => {\r\n    dispatch(setFetchingMoreMsgs(true))\r\n    // console.log('getCurrentChatData call')\r\n    // debugger\r\n    let chatId = parseInt(localStorage.getItem('chatId') )\r\n    let chatTypeId = parseInt(localStorage.getItem('chatTypeId') )\r\n    \r\n\r\n    let response = await chatsAPI.getChat(chatTypeId, chatId)\r\n    if(response.data.resultCode === 0){\r\n        // debugger\r\n        // console.log(`firstNewMsgID: ${response.data.data.firstNewMsgID}`)\r\n        let isUpdated = 'local';\r\n        // console.log(response.data.data)\r\n        if(!('local' in response.data.data.lastMessage)){\r\n            console.log('not local lastMessage in getCurrentChatData')\r\n        }\r\n        else if (!response.data.data.lastMessage.local){\r\n            // console.log('not here')\r\n            isUpdated = await dispatch(updateUnreadMsgs(chatTypeId, chatId, response.data.data.lastMessage.id))\r\n        }\r\n        // debugger\r\n        if(isUpdated==='local' || isUpdated.data.resultCode === 0){\r\n            let chatType = chatTypeId===0? 'dialog': 'conversation'\r\n            response.data.data[\"chatTypeId\"]=chatTypeId\r\n            response.data.data[\"chatType\"]=chatType\r\n            response.data.data[\"chatId\"]=chatId\r\n            dispatch(setCurrentChatIdsToStore(chatTypeId, chatId, response.data.data)) \r\n            await dispatch(getMessages(chatTypeId, chatId, response.data.data.readFromIndex, response.data.data.readFromIndexBefore)) // отсюда получили readFromIndex (равен 0 в первый раз???) (проперти rfi получило значение 0 ( так как зарядило None))\r\n        }  else {\r\n            console.log('getCurrentChatData Error in updateUnreadMsgs'+ isUpdated.data.messages[0])\r\n        }\r\n    } else {\r\n        console.log('getCurrentChatData Error in getChat'+ response.data.messages[0])\r\n    }\r\n    // debugger\r\n    // console.log('getCurrentChatData end call')\r\n    // dispatch(setPreFetchCC(true))\r\n    // console.log('setPreFetchCC as true')\r\n    // debugger\r\n    dispatch(setFetchingMoreMsgs(false))\r\n}\r\n\r\n\r\n// setCurrentChatMembers\r\n\r\nexport const refreshCurrentChatData = (method, requiredDataKey) => async(dispatch) => {\r\n    let chatId = parseInt(localStorage.getItem('chatId') )\r\n    let chatTypeId = parseInt(localStorage.getItem('chatTypeId') )\r\n    let response = await chatsAPI.getChat(chatTypeId, chatId)\r\n    if(response.data.resultCode === 0){\r\n        dispatch(method(response.data.data[requiredDataKey]))\r\n    } else {\r\n        console.log('refreshCurrentChatData Error in getChat'+ response.data.messages[0])\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n// const getChatHelper = async(chatType, chatTypeId, chatArray) => {\r\n//     let unfilteredArray = await Promise.all(chatArray\r\n//         .map(async (chat) => {\r\n//         let response = await chatsAPI.getChat(chatTypeId, chat.id)\r\n//         if(response.data.resultCode === 0){\r\n//             response.data.data[\"chatTypeId\"]=chatTypeId\r\n//             response.data.data[\"chatType\"]=chatType\r\n//             response.data.data[\"chatId\"]=chat.id\r\n//             return response.data.data\r\n//         } else {\r\n//             console.log('getChat Error '+ response.data.messages[0])\r\n//             return null\r\n//         }\r\n//         } ))\r\n//     return unfilteredArray.filter(chat => chat!==null)\r\n//     }\r\n        \r\n\r\n\r\nconst getChatHelper = async(chatArray) => {\r\n    let unfilteredArray = await Promise.all(chatArray\r\n        .map(async (chat) => {\r\n        let response = await chatsAPI.getChat(chat.chatTypeId, chat.id)\r\n        if(response.data.resultCode === 0){\r\n            response.data.data[\"chatTypeId\"] = chat.chatTypeId\r\n            response.data.data[\"chatId\"]=chat.id\r\n            response.data.data[\"chatTimeStamp\"]=chat.chatTimeStamp\r\n            if(chat.chatTypeId===0){\r\n                response.data.data[\"chatType\"]='dialog'\r\n            } else{\r\n                response.data.data[\"chatType\"]='conversation'\r\n            }\r\n            return response.data.data\r\n        } else {\r\n            console.log('getChat Error '+ response.data.messages[0])\r\n            return null\r\n        }\r\n        } ))\r\n    // return unfilteredArray.filter(chat => chat!==null)\r\n    return unfilteredArray.sort((chat1,chat2)=>chat2.chatTimeStamp - chat1.chatTimeStamp)\r\n    }\r\n\r\nexport const getChats = (page=1, query=null) => async(dispatch) => {\r\n    // debugger\r\n    let response = await chatsAPI.getChats(page, query); // chatTypeId, chatId// =>\r\n    if(response.data.resultCode === 0){\r\n        // let dialogs = await getChatHelper('dialog', 0, response.data.data.dialogs)\r\n        // let conversations = await getChatHelper('conversation', 1, response.data.data.conversations)\r\n        // let chats = [...dialogs, ...conversations]\r\n        // console.log(chats)\r\n        let chats = await getChatHelper(response.data.data.chats.items)\r\n        dispatch(setChats(chats))\r\n    } else {\r\n        console.log('getChats error '+ response.data.messages[0])\r\n    }\r\n}\r\n\r\n// чтобы не хранить кучу данных мы не дописываем в свойства сообщений чат к которому они относятся\r\nconst getMessagesHelper = (array, chatTypeId, chatId) => array.map(msg => (msg[chatTypeId]=chatTypeId, msg[chatId]=chatId, msg))\r\n\r\n\r\n// TODO c set start position of view messages on last readed and then after scroll setting 1 by 1 msgs as viewed\r\n// for first load set firstOfSetOfMsgsId, firstOfLastSetOfMsgsId as null -ed\r\n\r\n// after page reload from chats\\ => by getCCD null-ed firstOfSetOfMsgsId=null, firstOfLastSetOfMsgsId=null -> so we can restart count of that indexes ///// /, numOfDeletedMsgs=0\r\nexport const getMessages = (chatTypeId, chatId, readFromIndex, readFromIndexBefore,\r\n    //   firstOfSetOfMsgsId=null,  \r\n                            query=null, isRefreshAfterMsgCreating=null, numOfDeletedMsgs=0) =>  async(dispatch) => {\r\n\r\n\r\n    //  response.data.data.readFromIndexBefore !==  readFromIndexBefore -> old msgs download ( and we fetch with readFromIndex=readFromIndexNext)\r\n\r\n\r\n    // if (response.data.data.readFromIndexBefore ===  readFromIndexBefore && response.data.data.readFromIndexNext !==  readFromIndexBefore)\r\n\r\n    // let kek = fromWhere;\r\n    // console.log('from '+ kek)\r\n    // debugger // in this function changing state -> so it re-runs render of page but not like 1 action - so it not good and can affect on some vals that relative to part of its data\r\n    dispatch(setFetchingMoreMsgs(true))\r\n    if(numOfDeletedMsgs > 0){\r\n        dispatch(nullNumOfDeletedMsgs())\r\n    }\r\n    let response = await chatsAPI.getMessages(chatTypeId, chatId, readFromIndex, readFromIndexBefore, query, numOfDeletedMsgs);\r\n    if(response.data.resultCode === 0){\r\n        // console.log(`getMessages.response.data.data`);\r\n        // console.log(response.data)\r\n        // TODO move to chats-selector\r\n        // let allMsgs = [...getMessagesHelper(response.data.data.oldMsgs, true, chatTypeId, chatId), ...getMessagesHelper(response.data.data.newMsgs, false)].sort((msg1, msg2) => msg1.sended - msg2.sended)\r\n        let allMsgs = getMessagesHelper(response.data.data.items, chatTypeId, chatId) // readed changed to msgViewed\r\n\r\n        // if(allMsgs.length > 0){\r\n        //     // зачистим старый ласт мсджс при getCurrentChatData // if we start again from the chats page (so redux state wasnt deleted)\r\n        //     // if(firstOfSetOfMsgsId === null){\r\n        //     //     dispatch(setFirstOfLastSetOfMsgsId(null, null))\r\n        //     // }\r\n        //     // console.log('first of the list id') // should be 73 for the first time\r\n        //     // console.log(allMsgs[0].id)\r\n\r\n\r\n        //     // if(readFromIndexBefore !== allMsgs[0].id){/ // значит прогрузка старых, а не рефреш\r\n        //     //     if(firstOfSetOfMsgsId !== null){\r\n        //     //         dispatch(setFirsANDLastSetOfMsgsId(allMsgs[0].id, firstOfSetOfMsgsId))\r\n        //     //     } else {\r\n        //     //         dispatch(setFirsANDLastSetOfMsgsId(allMsgs[0].id, null))\r\n        //     //     }\r\n        //     // }\r\n\r\n\r\n            \r\n        // } else {\r\n        //     // no msgs in chat yet ( or you delete all of them)\r\n        //     // only for the first time can set vals as 0 \r\n        //     // for getCurrentChatData - while it calling -> firstOfSetOfMsgsId=null => if no msgs getted -> we can set  .firstOfLastSetOfMsgsId and pops.firstOfSetOfMsgsId as (0, 0)\r\n        //     // все равно не будет в апи читать с 0-го индекса - будет просто сортировка от 0-и выше ( даже если удалено локально ссобщения и там считывание идеt с иднекса)\r\n        //     // if(firstOfSetOfMsgsId === null){  // GCCD\r\n        //     //     dispatch(setFirsANDLastSetOfMsgsId(0, 0))\r\n        //     // }\r\n        // }\r\n\r\n        dispatch(setMessages(allMsgs))\r\n\r\n        if(allMsgs.length > 0){\r\n            dispatch(setReadFromIndexes(allMsgs[0].id, response.data.data.readFromIndexNext, response.data.data.readFromIndexBefore))    \r\n        } else { // can be only after refresh\r\n            dispatch(setReadFromIndexes(readFromIndex, response.data.data.readFromIndexNext, response.data.data.readFromIndexBefore))    \r\n        }\r\n        \r\n        \r\n        if(isRefreshAfterMsgCreating){\r\n            dispatch(shouldWindowScrollDown(false))\r\n            dispatch(setRefreshMessageCreating(true))\r\n        }\r\n\r\n\r\n        \r\n        // checkOnScrollTop(response, readFromIndex, dispatch)\r\n    } else {\r\n        console.log('getMessages error '+ response.data.messages[0])\r\n    }\r\n    \r\n    // if()\r\n    dispatch(setFetchingMoreMsgs(false))\r\n}\r\n\r\n\r\n\r\nexport const getFile = (fileId) => async(dispatch) => {\r\n    let downloadedFile = await chatsAPI.getFile(fileId)\r\n    console.log(\"downloadedFile\")\r\n    console.log(downloadedFile)\r\n    return downloadedFile.data\r\n    // return downloadedFile\r\n}\r\n\r\n// export const downloadFile = (filePath) => async(dispatch) => {\r\n//     let file = await chatsAPI.downloadFile(filePath)\r\n//     // return file\r\n// }\r\n\r\n// then TODO download files to idb to use after from idb not from server!!!!!!\r\n// export const downloadFilesToContent = (fileId) => async(dispatch)  => {\r\n//     // dispatch(addFileAsLoading(fileId))\r\n//     let downloadedFile = await chatsAPI.getFile(fileId)\r\n//     console.log(\"downloadedFile\")\r\n//     console.log(downloadedFile)\r\n//     if(downloadedFile.data.resultCode === 0){\r\n//         idbKeyval.set(`fileId_${fileId}`, downloadedFile.data.file) // may use `fileId_${fileId}` ,\r\n//         // dispatch(downloadedFile.data.file) // fileId\r\n//     }\r\n//     // dispatch(removeFileAsLoading(fileId))\r\n// }\r\n\r\nconst createMessageSnippent = async(chatTypeId, chatId, messageBody, fileId, dispatch) => {\r\n    let response = await chatsAPI.createMessage(chatTypeId, chatId, messageBody, fileId);\r\n    if(response.data.resultCode === 0){\r\n        dispatch(shouldWindowScrollDown(true))\r\n        // dispatch(getMessages(chatTypeId, chatId))\r\n    } else {\r\n        let message = response.data.messages.length  ? response.data.messages[0] : 'Some error';\r\n        dispatch(stopSubmit(\"CreateMessage\", {_error: message}));\r\n    }\r\n}\r\n\r\nexport const createMessageRequest = (chatTypeId, chatId, messageBody, file=null) => async(dispatch) => {\r\n    dispatch(setMessageCreating(true))\r\n    console.log('in createMessageRequest')\r\n    console.log(file)\r\n    if (file!==null){\r\n        // let fileUploadResponse = await chatsAPI.uploadFile(file) // TIP there is problems\r\n        let fileUploadResponse = await chatsAPI.uploadFile(file['fileURL'], file['fileName'])\r\n        console.log(`fileUploadResponse.data`);\r\n        console.log(fileUploadResponse.data.data)\r\n        if(fileUploadResponse.data.data['fileId']){\r\n            // console.log(fileUploadResponse.data.data['fileId'])\r\n            createMessageSnippent(chatTypeId, chatId, messageBody, fileUploadResponse.data.data['fileId'], dispatch)\r\n        } else {\r\n            console.log('fileUploadResponse error')\r\n            console.log(Object.keys(fileUploadResponse.data.data))\r\n        }\r\n    } else {\r\n        createMessageSnippent(chatTypeId, chatId, messageBody, null, dispatch)\r\n    }\r\n    dispatch(setMessageCreating(false))\r\n    \r\n}\r\n\r\nexport const editMessageRequest = (chatTypeId, chatId, messageId, newMessageBody) => async(dispatch) =>{\r\n\r\n    let response = await chatsAPI.editMessage(chatTypeId, chatId, messageId, newMessageBody);\r\n    if(response.data.resultCode === 0){\r\n        console.log('succs edited')\r\n    } else {\r\n        console.log('editMessageRequest error '+ response.data.messages[0])\r\n    }\r\n}\r\n\r\n\r\nexport const deleteMessageRequest = (chatTypeId, chatId, messageId) =>  async(dispatch) =>{\r\n    // ref={\r\n    // debugger\r\n    dispatch(setFetchingMoreMsgs(true))\r\n    let response = await chatsAPI.deleteMessage(chatTypeId, chatId, messageId);\r\n    if(response.data.data === null){\r\n        console.log('succs deleted')\r\n        // dispatch(setRefreshAfterDM(true))\r\n        dispatch(incNumOfDeletedMsgs())\r\n    } else {\r\n        console.log('deleteMessageRequest deleted '+ response.data.messages[0])\r\n    }\r\n    dispatch(setFetchingMoreMsgs(false))\r\n}\r\n\r\n\r\n\r\nconst clearChatTypes = ['myLocal', 'myGlobal', 'allLocal', 'allGlobal'];\r\nexport const clearChat = (chatTypeId, chatId, putType, clearType) => async(dispatch) => {\r\n    // if (!['myLocal', 'myGlobal', 'allLocal', 'allGlobal'].includes(clearType)){\r\n    //     console.log('unsupported clearType')\r\n    //     return null\r\n    // }\r\n    // debugger\r\n    let response = await chatsAPI.clearChat(chatTypeId, chatId,  putType, clearType);\r\n    // debugger\r\n    if(response.data.resultCode === 0){\r\n        return response.data.data.cleared\r\n    } else {\r\n        console.log('clearLocalChat deleted '+ response.data.messages[0])\r\n    }\r\n}\r\nexport const clearChatMyLocal = (chatTypeId, chatId, putType='clear', clearType=clearChatTypes[0])   => clearChat(chatTypeId, chatId, putType, clearType)\r\nexport const clearChatMyGlobal = (chatTypeId, chatId, putType='clear', clearType=clearChatTypes[1])  => clearChat(chatTypeId, chatId, putType, clearType)\r\nexport const clearChatAllLocal = (chatTypeId, chatId, putType='clear', clearType=clearChatTypes[2]) =>  clearChat(chatTypeId, chatId, putType, clearType)\r\nexport const clearChatAllGlobal = (chatTypeId, chatId, putType='clear', clearType=clearChatTypes[3]) =>  clearChat(chatTypeId, chatId, putType, clearType)\r\n\r\n\r\n\r\nexport const updateUnreadMsgs = (chatTypeId, chatId, lastGlobalReadMsgId, putType='updateUnreadMsgs') => async(dispatch) => {\r\n    // console.log('updateUnreadMsgs')\r\n    // console.log(chatTypeId, chatId, lastGlobalReadMsgId, putType='updateUnreadMsgs')\r\n    let response = await chatsAPI.updateUnreadMsgs(chatTypeId, chatId, putType, lastGlobalReadMsgId)\r\n    // console.log(response.data)\r\n    // debugger\r\n    if(response.data.resultCode === 0){\r\n        console.log('updateUnreadMsgs updated')\r\n    } else {\r\n        console.log('updateUnreadMsgs error')\r\n    }\r\n    return response\r\n}\r\n\r\n\r\nexport const createChatRequest = (snusers, name) => async(dispatch) => {\r\n    debugger\r\n    let response = await chatsAPI.createChat(snusers, name)\r\n    debugger\r\n    if(response.data.resultCode === 0){\r\n        console.log('createChatRequest created: ' + response.data.data.created)\r\n    } else {\r\n        console.log('createChatRequest error')\r\n        let message = response.data.messages.length  ? response.data.messages[0] : 'Some error';\r\n        dispatch(stopSubmit(\"CreateChat\", {_error: message}));\r\n    }\r\n}\r\n\r\nexport const createConversation = (snusers, name) => createChatRequest(snusers, name)\r\nexport const createDialog = (snusers) => createChatRequest(snusers, null)\r\n\r\n\r\n\r\nexport const deleteChatRequest = (chatTypeId, chatId) => async(dispatch) => {\r\n    let response = await chatsAPI.deleteChat(chatTypeId, chatId)\r\n    // debugger\r\n    if(response.data === ''){\r\n        console.log('chat succ deleted')\r\n    } else {\r\n        let message = response.data.messages.length  ? response.data.messages[0] : 'Some error';\r\n        console.log('deleteChatRequest error: ' + message)\r\n    }\r\n}\r\n\r\nexport const renameChatRequest = (chatTypeId, chatId, newChatName, putType='rename') => async(dispatch) => {\r\n    // debugger\r\n    let response = await chatsAPI.renameChat(chatTypeId, chatId, putType, newChatName)\r\n    // debugger\r\n    if(response.data.resultCode === 0){\r\n        console.log('chat renamed:'+ response.data.data.renamed)\r\n        dispatch(refreshCurrentChatData(setCurrentChatName, 'name'))\r\n    } else {\r\n        let message = response.data.messages.length  ? response.data.messages[0] : 'Some error';\r\n        dispatch(stopSubmit('renameChat', {_error: message}));\r\n    }\r\n}\r\n\r\n\r\n\r\n// athunku // thunku // athunkrf\r\n\r\n\r\n// all the same\r\nexport const toogleMemberStatus = (chatTypeId, chatId, userId, putType='toogleMemberStatus') => async(dispatch) => {\r\n    // let response = await chatsAPI.toogleMemberStatusForConversation(chatTypeId, chatId, putType, userId)\r\n    // if(response.data.resultCode === 0){\r\n    //     console.log('member status toggled: ' + response.data.data.toggled)\r\n    // } else {\r\n    //     let message = response.data.messages.length  ? response.data.messages[0] : 'Some error';\r\n    //     console.log('toogleMemberStatusForConversation error: '+ message)\r\n    // }\r\n    await chatPutParts(chatTypeId, chatId, userId, putType, chatsAPI.toogleMemberStatusForConversation.bind(chatsAPI), 'member status toggled: ', 'toggled', 'toogleMemberStatusForConversation error: ', dispatch, setCurrentChatMembers, 'members')\r\n}\r\n\r\nexport const addMember = (chatTypeId, chatId, userId, putType='addMember') => async(dispatch) => {\r\n    console.log('adding member')\r\n    console.log(chatTypeId, chatId, userId)\r\n    // let response = await chatsAPI.addMemberForConversation(chatTypeId, chatId, putType, userId)\r\n    // if(response.data.resultCode === 0){\r\n    //     console.log('member added: ' + response.data.data.memberAdded)\r\n    // } else {\r\n    //     let message = response.data.messages.length  ? response.data.messages[0] : 'Some error';\r\n    //     console.log('addMember error: '+ message)\r\n    // }\r\n    await chatPutParts(chatTypeId, chatId, userId, putType, chatsAPI.addMemberForConversation.bind(chatsAPI), 'member added: ', 'memberAdded', 'addMember error: ', dispatch, setCurrentChatMembers, 'members')\r\n}\r\n\r\n// после удаления мембера у которого были сообзения Bad Request: /api/chats/1/23/messages/\r\nexport const removeMember = (chatTypeId, chatId, userId, putType='removeMember') => async(dispatch) => {\r\n    // let response = await chatsAPI.removeMemberFromConversation(chatTypeId, chatId, putType, userId)\r\n    // if(response.data.resultCode === 0){\r\n    //     console.log('member removed: ' + response.data.data.memberRemoved)\r\n    // } else {\r\n    //     let message = response.data.messages.length  ? response.data.messages[0] : 'Some error';\r\n    //     console.log('removeMember error: '+ message)\r\n    // }\r\n    // debugger \r\n    // if(response.data.resultCode === 0){ storeDispatchMethod\r\n    //     storeDispatchMethod && dispatch(refreshCurrentChatData(storeDispatchMethod)) // chatTypeId, chatId\r\n    // } \r\n    let response = await chatPutParts(chatTypeId, chatId, userId, putType, chatsAPI.removeMemberFromConversation.bind(chatsAPI), 'member removed: ', 'memberRemoved', 'removeMember error: ', dispatch, setCurrentChatMembers, 'members')\r\n\r\n}\r\n\r\n\r\nexport const removeMemberMsgs = (chatTypeId, chatId, userId, putType='removeMemberMsgs') => async(dispatch) => {\r\n    // let response = await chatsAPI.removeMemberMsgsForConversation(chatTypeId, chatId, putType, userId)\r\n    // if(response.data.resultCode === 0){\r\n    //     console.log('member msgs removed: ' + response.data.data.memberMsgsRemoved)\r\n    // } else {\r\n    //     let message = response.data.messages.length  ? response.data.messages[0] : 'Some error';\r\n    //     console.log('removeMemberMsgs error: '+ message)\r\n    // }\r\n    await chatPutParts(chatTypeId, chatId, userId, putType, chatsAPI.removeMemberMsgsForConversation.bind(chatsAPI), 'member msgs removed: ', 'memberMsgsRemoved', 'removeMemberMsgs error: ')\r\n}\r\n\r\nexport const removeOneMemberMsg = (chatTypeId, chatId, userId, putType='removeOneMemberMsg') => async(dispatch) => {\r\n    // let response = await chatsAPI.removeOneMemberMsgForConversation(chatTypeId, chatId, putType, userId)\r\n    // if(response.data.resultCode === 0){\r\n    //     console.log('member msg removed: ' + response.data.data.memberMsgRemoved)\r\n    // } else {\r\n    //     let message = response.data.messages.length  ? response.data.messages[0] : 'Some error';\r\n    //     console.log('removeOneMemberMsg error: '+ message)\r\n    // }\r\n    await chatPutParts(chatTypeId, chatId, userId, putType, chatsAPI.removeOneMemberMsgForConversation.bind(chatsAPI), 'member msg removed: ', 'memberMsgRemoved', 'removeOneMemberMsg error: ')\r\n}\r\n\r\n\r\nexport const setChatPhotoRequest = (chatTypeId, chatId, newChatPhoto, putType='setChatPhoto') => async(dispatch) => {\r\n    await chatPutParts(chatTypeId, chatId, newChatPhoto, putType, chatsAPI.setChatPhoto.bind(chatsAPI), 'chat photo changed: ', 'isChatPhotoChanged', 'setChatPhotoRequest error: ', dispatch, setCurrentChatPhoto, 'chatPhoto')\r\n}\r\n// all the same\r\n\r\nconst chatPutParts = async(chatTypeId, chatId, putData, putType, apiMethod, onSuccStr, onSuccDataKey, onErrorStr, dispatch=null, storeDispatchMethod=null, requiredDataKey=null) => {\r\n    // debugger\r\n    let response = await apiMethod(chatTypeId, chatId, putType, putData)\r\n    // debugger\r\n    if(response.data.resultCode === 0){\r\n        console.log(onSuccStr + response.data.data[onSuccDataKey])\r\n        storeDispatchMethod && dispatch(refreshCurrentChatData(storeDispatchMethod, requiredDataKey))\r\n    } else {\r\n        let message = response.data.messages.length  ? response.data.messages[0] : 'Some error';\r\n        console.log(onErrorStr + message)\r\n    }\r\n    return response;\r\n}\r\nexport default chatsReducer;\r\n\r\n\r\n\r\n// export const getChat = (chatTypeId, chatId) => async(dispatch) => {\r\n//     let response = await chatsAPI.getChat(asyncAPIMethodParams)\r\n//     if(response.data.resultCode === 0){\r\n        \r\n//     } else {\r\n        \r\n//     }\r\n// }\r\n\r\n\r\n\r\n\r\n// startMsgId // lastReadMessageId // msgsType\r\n// 0\r\n// 8\r\n// old\r\n// <QuerySet []>\r\n// <QuerySet []>\r\n// listOfLocalSubs\r\n// []\r\n// returnList\r\n// [<QuerySet []>, <QuerySet [<ConversationMessage: ConversationMessage object (8)>]>]\r\n// <QuerySet []>\r\n// listOfLocalSubs\r\n// []\r\n// returnList\r\n// [[], <QuerySet [<ConversationMessage: ConversationMessage object (8)>]>]\r\n// lastReadMessageId // msgsType\r\n// 8\r\n// new\r\n// [31/Jul/2020 17:50:08] \"GET /api/chats/1/6/messages/ HTTP/1.1\" 200 291\r\n// startMsgId // lastReadMessageId // msgsType\r\n// 0\r\n// 7\r\n// old\r\n// <QuerySet [<MyConversationMessage: MyConversationMessage object (8)>]>\r\n// <QuerySet [<MyConversationMessage: MyConversationMessage object (8)>]>\r\n// listOfLocalSubs\r\n// [8]\r\n// returnList\r\n// [<QuerySet [<MyConversationMessage: MyConversationMessage object (8)>]>, <QuerySet []>]\r\n// <QuerySet [<MyConversationMessage: MyConversationMessage object (8)>]>\r\n// listOfLocalSubs\r\n// [8]\r\n// returnList\r\n// [[], <QuerySet []>]\r\n// lastReadMessageId // msgsType\r\n// 7\r\n// new\r\n\r\n// [local, global]","import React from 'react';\r\nimport preloader from \"../../../assets/images/preloader1.gif\";\r\n\r\nlet Preloader = (props) => {\r\n    return <div  style={ { backgroundColor: 'white' } }>\r\n        <img src={preloader} style={ { width: '8wh', height: '8vh' } }/>\r\n    </div>\r\n}\r\n\r\nexport default Preloader;","// import moment from 'moment-timezone/moment-timezone';\r\nexport const convertTime = (unix_timestamp) => {\r\n    if(!unix_timestamp) return ''\r\n    let time = new Date(unix_timestamp * 1000);\r\n    let hours = time.getHours()< 10 ? `0${time.getHours()}` : time.getHours()\r\n    let mins = time.getMinutes() < 10 ? `0${time.getMinutes()}`: time.getMinutes()\r\n    return `${hours}:${mins}`\r\n}\r\n\r\n// https://overcoder.net/q/25947/%D0%BF%D0%BE%D0%BB%D1%83%D1%87%D0%B5%D0%BD%D0%B8%D0%B5-%D1%81%D0%BC%D0%B5%D1%89%D0%B5%D0%BD%D0%B8%D1%8F-%D1%87%D0%B0%D1%81%D0%BE%D0%B2%D0%BE%D0%B3%D0%BE-%D0%BF%D0%BE%D1%8F%D1%81%D0%B0-%D0%BA%D0%BB%D0%B8%D0%B5%D0%BD%D1%82%D0%B0-%D0%B2-javascript","import React, { useEffect, useState } from 'react';\r\nimport styles from './FormsControls.module.css'\r\nimport { Field } from 'redux-form';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport { chatsAPI } from '../../../api/api';\r\n\r\n\r\n// import MultiSelect from \"react-multi-select-component\";\r\n\r\n\r\n// how to show that we dont pass the field validation before submitting ( or after )\r\n// field-level validation\r\nconst FormControl = ({ input, meta: {touched, error, warning}, children }) => { // children = <input {...input} {...restProps} /> or children = <input {...input} {...restProps} />\r\n    const hasError = touched && error;\r\n    const hasWarn = touched && warning;\r\n    return (\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error: \"\") + ' ' + (hasWarn ? styles.warning: \"\")}>\r\n            <div className=''>\r\n                {children}\r\n            </div>\r\n            <div className=''>\r\n                {\r\n                (hasError && <span>{error}</span>) ||\r\n                (hasWarn && <span>{warning}</span>)\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const TextArea = (props) => {\r\n    const { input, meta, child, ...restProps } = props;\r\n    return (<FormControl {...props}><textarea {...input} {...restProps} /></FormControl>)\r\n}\r\n\r\nexport const Input = (props) => {\r\n    const { input, meta, child, ...restProps } = props;\r\n    // console.log('Input input: ' + input)\r\n    // console.log('Input meta: ' + meta)\r\n    // console.log('Input child: ' + child)\r\n    // console.log('Input restProps: ' + restProps)\r\n    // console.log('Input props: ' + props)\r\n    return (<FormControl {...props}><input {...input} {...restProps}/></FormControl>)\r\n}\r\n\r\n\r\n\r\n// export const UploadFiles = ({fileId}) => {\r\n\r\n//     const [selectedFiles, setSelectedFiles] = useState(undefined);\r\n//     const [currentFile, setCurrentFile] = useState(undefined);\r\n//     const [progress, setProgress] = useState(0);\r\n//     const [message, setMessage] = useState(\"\");\r\n\r\n//     const [fileInfos, setFileInfos] = useState([]);\r\n\r\n\r\n//     const selectFile = (event) => {\r\n//         setSelectedFiles(event.target.files);\r\n//       };\r\n\r\n//     const upload = () => {\r\n//         let currentFile = selectedFiles[0];\r\n    \r\n//         setProgress(0);\r\n//         setCurrentFile(currentFile);\r\n    \r\n//         chatsAPI.uploadFile(currentFile, (event) => {\r\n//           setProgress(Math.round((100 * event.loaded) / event.total));\r\n//         })\r\n//           .then((response) => {\r\n//             setMessage(response.data.message);\r\n//             return chatsAPI.getFile(fileId);\r\n//           })\r\n//           .then((files) => {\r\n//             setFileInfos(files.data);\r\n//           })\r\n//           .catch(() => {\r\n//             setProgress(0);\r\n//             setMessage(\"Could not upload the file!\");\r\n//             setCurrentFile(undefined);\r\n//           });\r\n    \r\n//         setSelectedFiles(undefined);\r\n//       };\r\n\r\n//     useEffect(() => {\r\n//         chatsAPI.getFile(fileId).then((response) => {\r\n//           setFileInfos(response.data);\r\n//         });\r\n//       }, []);\r\n\r\n//     return (\r\n//       <div>\r\n//         {currentFile && (\r\n//           <div className=\"progress\">\r\n//             <div\r\n//               className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n//               role=\"progressbar\"\r\n//               aria-valuenow={progress}\r\n//               aria-valuemin=\"0\"\r\n//               aria-valuemax=\"100\"\r\n//               style={{ width: progress + \"%\" }}\r\n//             >\r\n//               {progress}%\r\n//             </div>\r\n//           </div>\r\n//         )}\r\n  \r\n//         <label className=\"btn btn-default\">\r\n//           <input type=\"file\" onChange={selectFile} />\r\n//         </label>\r\n  \r\n//         <button\r\n//           className=\"btn btn-success\"\r\n//           disabled={!selectedFiles}\r\n//           onClick={upload}\r\n//         >\r\n//           Upload\r\n//         </button>\r\n  \r\n//         <div className=\"alert alert-light\" role=\"alert\">\r\n//           {message}\r\n//         </div>\r\n  \r\n//         <div className=\"card\">\r\n//           <div className=\"card-header\">List of Files</div>\r\n//           <ul className=\"list-group list-group-flush\">\r\n//             {fileInfos &&\r\n//               fileInfos.map((file, index) => (\r\n//                 <li className=\"list-group-item\" key={index}>\r\n//                   <a href={file.url}>{file.name}</a>\r\n//                 </li>\r\n//               ))}\r\n//           </ul>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   };\r\n\r\n  \r\n\r\n\r\n// export const FileInput = (props) => {\r\n//     // TIP there is problems\r\n    \r\n//     const { input, meta, child, ...restProps } = props;\r\n//     return (<FormControl {...props}>  <input {...input} {...restProps}/> </FormControl>)\r\n\r\n// }\r\n// // <input {...input} {...restProps}/> onChange={props.selectFile}\r\n\r\n\r\n// export class FileInput extends React.Component {\r\nexport const FileInput = (props) => {\r\n\r\n    const { input, meta, child, ...restProps } = props;\r\n\r\n    const getBase64 = (file) => {\r\n      return new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onload = () => resolve(reader.result);\r\n        reader.onerror = error => reject(error);\r\n      });\r\n    }\r\n  \r\n    const onFileChange = async (e) => {\r\n      const { input } = props\r\n      const targetFile = e.target.files[0]\r\n      if (targetFile) {\r\n        const val = await getBase64(targetFile) \r\n        input.onChange({'fileURL': val, 'fileName':targetFile.name})\r\n      } else {\r\n        input.onChange(null)\r\n      }\r\n    }\r\n  \r\n    // render() {\r\n  \r\n      return (\r\n    //   <>\r\n        <input \r\n          type=\"file\"\r\n          onChange={onFileChange}\r\n        //   {...input} {...restProps}\r\n        />\r\n        \r\n      )\r\n    // }\r\n  }\r\n  \r\n\r\n// export const MultiSelectWrap = (props) => {\r\n//     debugger\r\n//     // const { meta, child, ...restProps } = props; // input\r\n//     // console.log(...restProps)\r\n//     // debugger\r\n//     // console.log('Input input: ' + input)\r\n//     // console.log('Input meta: ' + meta)\r\n//     // console.log('Input child: ' + child)\r\n//     // console.log('Input restProps: ' + restProps)\r\n//     // console.log('Input props: ' + props)\r\n//     return (<FormControl {...props}><MultiSelect options={props.optionsMS} \r\n//         value={props.valueMS} \r\n//         onChange={props.onChangeMS}\r\n//         labelledBy={props.labelledByMS} /></FormControl>)\r\n// }\r\n\r\n\r\n\r\n\r\n// export const Select = (props) => {\r\n//     const { input, meta, child, ...restProps } = props;\r\n//     return (<FormControl {...props}>\r\n//         <select {...input} {...restProps}>\r\n//         </select>\r\n//         </FormControl>)\r\n// }\r\n/// как возвращять полученый список в редакс форм\r\n// const ForChatUsersList = () => {\r\n//     // const onSubmitMemberList = () => {\r\n\r\n//     // }\r\n//     const [] = useState // selectedMembers\r\n// return (\r\n//     <UsersContainer />\r\n// )\r\n// }\r\n\r\n// export const ForChatUsersListWrap = (props) => {\r\n//     // debugger\r\n//     // return (<FormControl {...props}><ForChatUsersList /></FormControl>)\r\n//     return <ForChatUsersList />\r\n// }\r\n\r\nexport const createField = (placeholder, name, component, validators, props={}, text=\"\") => { \r\n    return <div className=''><Field placeholder={placeholder} name={name} component={component} validate={validators} {...props}/>{text}</div>\r\n};\r\n\r\n\r\nexport class DropDownSelect extends React.Component { // eslint-disable-line react/prefer-stateless-function\r\n\r\n    renderSelectOptions = (person) => (\r\n        <option key={person.userId} value={person.userId}>{person.name}</option>\r\n    )\r\n\r\n    render() {\r\n        const { input, label } = this.props;\r\n        return (\r\n        <div>\r\n            {/* <label htmlFor={label}>{label}</label> */}\r\n            <select {...input}>\r\n            <option value=\"\">Select</option>\r\n            {this.props.people.map(this.renderSelectOptions)}\r\n            </select>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nDropDownSelect.propTypes = {\r\n    people: PropTypes.array,\r\n    input: PropTypes.object,\r\n    label: PropTypes.string,\r\n};\r\n\r\n\r\n\r\nexport const ReduxFormSnippet = ({ pristine, reset, submitting, error, sumbitButtonName } ) => {\r\n    return (\r\n        <>\r\n        {\r\n            error && \r\n            <div className={styles.formSummaryError}>\r\n                {error}\r\n            </div>\r\n            }\r\n            <div className=''>\r\n                <button type='submit' disabled={pristine || submitting} >{sumbitButtonName}</button>\r\n            </div>\r\n            <div className=''>\r\n                <button type='button' disabled={pristine || submitting} onClick={reset}>Clear</button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n// export const Select = (props) => {\r\n//     const { input, meta, child, ...restProps } = props;\r\n//     // console.log('Input input: ' + input)\r\n//     // console.log('Input meta: ' + meta)\r\n//     // console.log('Input child: ' + child)\r\n//     // console.log('Input restProps: ' + restProps)\r\n//     // console.log('Input props: ' + props)\r\n//     return (<FormControl {...props}><DropDownSelect {...input} {...restProps} /></FormControl>)\r\n// }","export const requiredField = value => {\r\n    if(value) return undefined;\r\n    return \"Field is required\";\r\n}\r\n\r\n\r\nconst maxLength = max => value => \r\n    value && value.length > max ? `Value must be no longer then ${max} symbols`: undefined;\r\n\r\n    \r\nexport const maxLength10 = maxLength(10);\r\nexport const maxLength30 = maxLength(30);\r\nexport const maxLength50 = maxLength(50);\r\nexport const maxLength200 = maxLength(200);\r\nexport const maxLength1000 = maxLength(1000);","const backupQuotes = (string) => {\r\n    // obj = JSON.parse(obj.replace(/'/g, '\"'));\r\n    string = JSON.stringify(string).replace(/\"/g, '\\'')\r\n    // debugger\r\n    return string;\r\n}\r\nexport default backupQuotes;","export const updateObjectInArray = (itmes, itemId, objPropName, newObjProps) => {\r\n    // debugger\r\n    return itmes.map( item =>  {\r\n        if (item[objPropName] === itemId) {\r\n            return {...item, ...newObjProps}\r\n        }\r\n        return item;\r\n    })  \r\n}","import {usersAPI} from \"../api/api\";\r\nimport { updateObjectInArray } from \"../components/common/utils/object-helpers\";\r\n\r\n// const FOLLOW = 'FOLLOW';\r\n// const UNFOLLOW = 'UNFOLLOW';\r\nconst FOLLOW_UNFOLLOW = 'FOLLOW_UNFOLLOW';\r\nconst SET_USERS = 'SET_USERS';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\r\nconst SET_QUERY = 'SET_QUERY';\r\nlet initialState = {\r\n    users: [ ],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [],\r\n    query: '',\r\n};\r\n\r\nconst usersReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case SET_QUERY: {\r\n            return {...state, query:action.query}\r\n        }\r\n        case FOLLOW_UNFOLLOW: { \r\n            // debugger\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"userId\", {userRelation: action.userRelation}) //\r\n            }\r\n        }\r\n        // case UNFOLLOW:\r\n        //     return {\r\n        //         ...state,\r\n        //         users: updateObjectInArray(state.users, action.userId, \"userId\", {followed: false})\r\n        //     }\r\n        case SET_USERS: {\r\n            return { ...state, users: action.users }\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return { ...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return { ...state, totalUsersCount: action.count}\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return { ...state, isFetching: action.isFetching}\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            // console.log(`followingInProgress: ${state.followingInProgress}`);\r\n            // debugger\r\n            let l = {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n            // debugger\r\n            return l\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setQuery = (query) => ({type: SET_QUERY, query })\r\nexport const followUnfollowSuccess = (userId, userRelation) => ({type: FOLLOW_UNFOLLOW, userId, userRelation })\r\n// export const unfollowSuccess = (userId, userRelation) => ({type: UNFOLLOW, userId, userRelation })\r\nexport const setUsers = (users) => ({type: SET_USERS, users })\r\nexport const setCurrentPage = (currentPage) => ({type: SET_CURRENT_PAGE, currentPage })\r\nexport const setTotalUsersCount = (totalUsersCount) => ({type: SET_TOTAL_USERS_COUNT, count: totalUsersCount })\r\nexport const toggleIsFetching = (isFetching) => ({type: TOGGLE_IS_FETCHING, isFetching })\r\nexport const toggleFollowingProgress = (isFetching, userId) => ({type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId })\r\n\r\n\r\n\r\n\r\n\r\n// we dont actually need pageSize\r\nexport const requestUsers = (page, pageSize) => {\r\n    // debugger\r\n    return async(dispatch) => {\r\n        dispatch(toggleIsFetching(true));\r\n        dispatch(setCurrentPage(page));\r\n\r\n        let response =  await usersAPI.getUsers(page);\r\n        // debugger\r\n        \r\n        dispatch(toggleIsFetching(false));\r\n        dispatch(setUsers(response.data.users.items));\r\n        dispatch(setTotalUsersCount(response.data.users.totalCount));\r\n    }\r\n}\r\n\r\n\r\nexport const searchUsers = (page, query) => {\r\n    return async(dispatch) => {\r\n        dispatch(toggleIsFetching(true));\r\n        dispatch(setCurrentPage(page));\r\n\r\n        let response =  await usersAPI.getUsers(page, query);\r\n        // debugger\r\n        \r\n        dispatch(toggleIsFetching(false));\r\n        dispatch(setUsers(response.data.users.items));\r\n        dispatch(setTotalUsersCount(response.data.users.totalCount));\r\n    }\r\n}\r\n\r\nconst followUnfollowFlow = async(dispatch, userId, apiMethod, actionCreator) => {\r\n    dispatch(toggleFollowingProgress(true, userId));\r\n    // debugger\r\n    let response =  await apiMethod(userId);\r\n    // debugger\r\n    if (response.data.resultCode === 0 || response.data === '') {\r\n        let response2 = await usersAPI.getfollow(userId);\r\n        // debugger\r\n        if (response2.data.resultCode === 0) {\r\n            dispatch(actionCreator(userId, response2.data.data.userRelation));\r\n        }\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId));\r\n}\r\n\r\nexport const follow = (userId) => {\r\n    return (dispatch) => {\r\n        followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), followUnfollowSuccess);\r\n    }\r\n}\r\nexport const unfollow = (userId) => {\r\n    return (dispatch) => {\r\n        followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), followUnfollowSuccess);\r\n    }\r\n}\r\n\r\nexport default usersReducer;","/* eslint-disable jsx-a11y/anchor-is-valid */\r\n\r\nimport React from 'react';\r\nimport styles from \"./Users.module.css\";\r\nimport userPhoto from \"../../assets/images/user.png\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nlet User = ({user, followingInProgress, unfollow, follow}) => {\r\n    console.log(user)\r\n    // debugger followed\r\n    return (\r\n       <div>\r\n                <span>\r\n                    <div>\r\n                       <NavLink to={'/profile/' + user.userId}>\r\n                        <img src={user.photos.small != null ? user.photos.small : userPhoto}\r\n                             className={styles.userPhoto}/>\r\n                       </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        {(user.userRelation === 'subscription' || user.userRelation === 'friend')\r\n                        //['subscription', 'friend'].includes(user.userRelation)\r\n                        ?\r\n                            <button disabled={followingInProgress\r\n                                .some(id => id === user.userId)}\r\n                                      onClick={() => { unfollow(user.userId) }}>\r\n                                Unfollow</button>\r\n                        :\r\n                        // ||\r\n                        // (['subscriber', null].includes(user.userRelation) \r\n                        // &&\r\n                            <button disabled={followingInProgress\r\n                                .some(id => id === user.userId)}\r\n                                      onClick={() => { follow(user.userId) }}>\r\n                                      Follow</button>\r\n                        }\r\n\r\n                    </div>\r\n                </span>\r\n                <span>\r\n                    <span>\r\n                        <div>{user.name}</div>\r\n                        <div>{user.status}</div>\r\n                    </span>\r\n                    {/* <span>\r\n                        <div>{\"user.location.country\"}</div>\r\n                        <div>{\"user.location.city\"}</div>\r\n                    </span> */}\r\n                </span>\r\n            </div>)\r\n}\r\n\r\nexport default User;\r\n\r\n\r\n\r\nexport const ForChatUser = ({user, setSelectedForChatUsers, setSelectedForChatUser, selectedForChatUsers, chatUsersIds, styleForUser, ...props}) => {\r\n    // console.log(user)\r\n    // debugger followed // className={styleForUser}\r\n    // console.log([...selectedForChatUsers.filter(selUserId => selUserId !== user.userId)])\r\n    // console.log(selectedForChatUsers)\r\n    return ( \r\n        <div>\r\n            <NavLink to={'/profile/' + user.userId}>\r\n                <div >{user.name}</div>\r\n                <div className={styles.userChoosePhoto}><img src={user.photos.small} alt='Ava' /></div>\r\n            </NavLink>\r\n            { selectedForChatUsers \r\n            ?  \r\n                selectedForChatUsers.includes(user.userId) ? \r\n                // setSelectedForChatUsers ?\r\n                <a onClick={()=>{setSelectedForChatUsers( selectedForChatUsers.filter(selUserId => selUserId !== user.userId) )}}>Remove User</a> \r\n                // :\r\n                // null\r\n                // // null --- cause cant be anything - this bloack should be closed after 1 member choise \r\n                :\r\n                <a onClick={()=>{setSelectedForChatUsers([...selectedForChatUsers, user.userId])}}>Add User</a> \r\n\r\n            :\r\n                chatUsersIds.includes(user.userId) ? \r\n                    <div style={{color:\"blue\"}}>Chat Member</div>  \r\n                : \r\n\r\n                 <a onClick={()=>\r\n                    {\r\n                     setSelectedForChatUser(user.userId);\r\n                     console.log('after that should run inner function of useUserReducer '+ user.userId) \r\n                    //  props.clearCurrentFocusedWindow(props.fWAUFC) - dont work why???? but its better - cause i can choose a lot of users for adding to chat\r\n                    }\r\n                }>Add Member</a>  \r\n             }\r\n            \r\n        </div>\r\n             )\r\n}\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport styles from \"./paginator.module.css\";\r\nimport cn from \"classnames\";\r\n\r\nlet Paginator = ({totalItemsCount, pageSize, currentPage, onPageChanged, portionSize = 10}) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n\r\n    return <div className={styles.paginator}>\r\n        { portionNumber > 1 &&\r\n        <button onClick={() => setPortionNumber(portionNumber - 1)}>PREV</button> }\r\n\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p<=rightPortionPageNumber)\r\n                .map((p) => {\r\n                return <span className={ cn({\r\n                    [styles.selectedPage]: currentPage === p\r\n                }, styles.pageNumber) }\r\n                             key={p}\r\n                             onClick={(e) => {\r\n                                 onPageChanged(p);\r\n                             }}>{p}</span>\r\n            })}\r\n        { portionCount > portionNumber &&\r\n            <button onClick={() => setPortionNumber(portionNumber + 1)}>NEXT</button> }\r\n\r\n\r\n    </div>\r\n}\r\n\r\nexport default Paginator;","import React from 'react';\r\n\r\n// import Paginator from \"../common/Paginator/Paginator\";\r\nimport User, { ForChatUser } from \"./User\";\r\nimport Paginator from '../common/Paginator/Paginator';\r\n\r\n\r\nlet Users = ({currentPage, totalUsersCount, pageSize, onPageChanged, users, forChat=false, \r\n                                                                                            setSelectedForChatUsers, setSelectedForChatUser,  chatUsersIds,\r\n    selectedForChatUsers, styleForUsers, styleForUser , ...props}) => {\r\n        // console.log('Users for ForChatUser')\r\n        // console.log(chatUsersIds)\r\n        // debugger\r\n    return <div>\r\n        <Paginator currentPage={currentPage} onPageChanged={onPageChanged}\r\n                   totalItemsCount={totalUsersCount} pageSize={pageSize}/>\r\n        <div>\r\n            {\r\n                users.map(u => forChat ? <ForChatUser user={u}\r\n\r\n                                    setSelectedForChatUsers ={setSelectedForChatUsers} // can be undef if it member adding\r\n                                    setSelectedForChatUser={setSelectedForChatUser}\r\n                                    selectedForChatUsers={selectedForChatUsers} // can be undef if it member adding\r\n                                    styleForUser= {styleForUser}\r\n                                    chatUsersIds = {chatUsersIds}\r\n\r\n                                    // toogleFocuseElemArr={props.toogleFocuseElemArr}\r\n                                    // usersForChatShow={props.usersForChatShow} \r\n                                    // setUsersForChatShow={props.setUsersForChatShow}\r\n                                    fWAUFC={props.fWAUFC}\r\n                                    clearCurrentFocusedWindow={props.clearCurrentFocusedWindow}\r\n\r\n\r\n\r\n                                     key={u.id}/>                 \r\n                                     :\r\n                                     <User user={u}\r\n                                     followingInProgress={props.followingInProgress}\r\n                                     key={u.id}\r\n                                     unfollow={props.unfollow}\r\n                                     follow={props.follow}/>  \r\n                )\r\n            }\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Users;","import { createSelector } from \"reselect\";\r\nimport replaceQuotes from \"../components/common/utils/quotes\";\r\n\r\nexport const getUsersPrimitiveSelector = state => {\r\n    return  state.usersPage.users;//.filter(u => true);\r\n}\r\n\r\n// export const getUsersSelector = state => {\r\n//     return getUsers().filter(u => true);\r\n// }\r\n\r\n// we dont need to backupQuotes cause we cant edit other users profile pages\r\nexport const getUsers = createSelector( getUsersPrimitiveSelector, (users) => {\r\n    let k = users.map(u => ({...u, photos: replaceQuotes(u.photos)}))\r\n    // debugger\r\n    return k\r\n})\r\n\r\nexport const getQuery = state => {\r\n    return state.usersPage.query;\r\n}\r\n\r\nexport const getPageSize = state => {\r\n    return  state.usersPage.pageSize;\r\n}\r\n\r\nexport const getTotalUsersCount = state => {\r\n    return  state.usersPage.totalUsersCount;\r\n}\r\n\r\n\r\nexport const getCurrentPage = state => {\r\n    return  state.usersPage.currentPage;\r\n}\r\n\r\n\r\nexport const getIsFetching = state => {\r\n    return  state.usersPage.isFetching;\r\n}\r\n\r\n\r\nexport const getFollowingInProgress = state => {\r\n    return  state.usersPage.followingInProgress;\r\n}\r\n\r\n\r\n// export const getUsersSuperSelector2 = createSelector( getUsers, getIsFetching, (users, isFetching) => {\r\n//     return users.filter(u => true);\r\n// })\r\n","import React from 'react';\r\nimport { createField, Input } from '../common/FormsControls/FormsControls';\r\nimport { reduxForm } from 'redux-form';\r\nimport { maxLength50 } from '../../utils/validators/validators';\r\nimport styles from '../common/FormsControls/FormsControls.module.css'\r\nimport { searchUsers , setQuery} from '../../redux/users-reducer';\r\nimport { connect } from 'react-redux';\r\nimport {getCurrentPage, getQuery} from \"../../redux/users-selectors\";\r\n\r\nconst UsersSearchForm = props => {\r\n    const { handleSubmit, pristine, reset, submitting, error, query } = props\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField(query, \"search\", Input, [maxLength50], {defaultValue: query})}\r\n            {\r\n            error && \r\n            <div className={styles.formSummaryError}>\r\n                {error}\r\n            </div>\r\n            }\r\n            <div className=''>\r\n                <button type='submit' disabled={pristine || submitting} >Run</button>\r\n            </div>\r\n            <div className=''>\r\n                <button type='button' disabled={pristine || submitting} onClick={reset}>Clear Values</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst UsersSearchReduxForm = reduxForm({form:'UsersSearch'})(UsersSearchForm)\r\n\r\nconst UsersSearch = (props) => {\r\n    const onSubmit = (formData) => {\r\n        props.setQuery(formData.search)\r\n        props.searchUsers(props.currentPage, formData.search)\r\n    }\r\n    // if(props.isAuth) return (<Redirect to='/profile'/>)\r\n\r\n    return (<>\r\n        <div className=''>\r\n            <label htmlFor=\"\">SEARCH: </label><UsersSearchReduxForm onSubmit={onSubmit} query={props.query}/>\r\n        </div>\r\n        </>)\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    currentPage: getCurrentPage(state),\r\n    query: getQuery(state),\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, {searchUsers, setQuery})(UsersSearch);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    follow,\r\n    setCurrentPage,\r\n    unfollow, toggleFollowingProgress, requestUsers, searchUsers\r\n} from '../../redux/users-reducer';\r\nimport Users from './Users';\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport { compose } from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount, getUsers, getQuery\r\n} from \"../../redux/users-selectors\";\r\nimport UsersSearch from './UsersSearch';\r\n\r\nimport { useUsersEffects } from '../../customHooks/usersHooks';\r\n\r\n\r\n// export function useQuering(isWithQuery){\r\n//     const [queried, setQueried] = useState(null)\r\n//     useEffect(()=>{\r\n//         setQueried(isWithQuery)\r\n//     },[isWithQuery])\r\n//     return queried\r\n// }\r\n\r\n// chatUsersIds // filter list\r\n// onClick={() => {props.toogleFocuseElem(props.setUsersForChatShow, props.usersForChatShow);onSubmit();}} // blur memberlist -> send to api request\r\n\r\n\r\n\r\nconst UsersContainer = (props) => {\r\n    // const queried = useQuering(false)\r\n    // const [query, setQuery] = useState('')\r\n    // const { currentPage, pageSize } = props;\r\n    const [onPageChanged] = useUsersEffects(props.getUsers, props.searchUsers, props.query, props.currentPage, props.pageSize)\r\n\r\n    // debugger\r\n    // console.log(props.chatUsersIds)\r\n\r\n    return (<div className={props.styleForUsers ? props.styleForUsers: ''}>\r\n        {props.isFetching ? <Preloader /> : null}\r\n        <div >\r\n            <UsersSearch/>\r\n        </div>\r\n        { props.fWUFCID === 0 ? \r\n        //props.forChat && props.setSelectedForChatUsers ?  \r\n        \r\n        \r\n        // <a onClick={props.toogleFocuseElem(props.setUsersForChatShow, props.usersForChatShow)}>\r\n        //     End Selection\r\n        // </a>\r\n        <a onClick={ () =>  props.clearCurrentFocusedWindow(props.fWUFCID) }>\r\n            End Selection\r\n        </a>\r\n        : null}\r\n        \r\n        <Users \r\n        \r\n            totalUsersCount={props.totalUsersCount}\r\n            pageSize={props.pageSize}\r\n            currentPage={props.currentPage}\r\n            onPageChanged={onPageChanged}\r\n            users={props.users}\r\n            follow={props.follow}\r\n            unfollow={props.unfollow}\r\n            followingInProgress={props.followingInProgress}\r\n\r\n\r\n            forChat = {props.forChat}\r\n\r\n\r\n            setSelectedForChatUsers = {props.setSelectedForChatUsers} // can be undef if it member adding\r\n            setSelectedForChatUser = {props.setSelectedForChatUser} // can be undef if it chat creation\r\n            chatUsersIds = {props.chatUsersIds} // can be undef if it chat creation\r\n\r\n            // toogleFocuseElemArr={props.toogleFocuseElemArr}\r\n            // usersForChatShow={props.usersForChatShow} \r\n\r\n            \r\n            // setUsersForChatShow={props.setUsersForChatShow} // can be undef if it chat creation\r\n            fWAUFC={props.fWAUFC}\r\n            clearCurrentFocusedWindow={props.clearCurrentFocusedWindow}\r\n\r\n\r\n            selectedForChatUsers={props.selectedForChatUsers} // can be undef if it member adding\r\n            styleForUsers= {props.styleForUsers}\r\n            styleForUser={props.styleForUser}\r\n        />\r\n    </div>)\r\n}\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state),\r\n        query: getQuery(state),\r\n    }\r\n}\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, { follow, unfollow, setCurrentPage, toggleFollowingProgress, getUsers: requestUsers, searchUsers })\r\n)(UsersContainer)\r\n\r\n// class UsersContainer extends React.Component {\r\n\r\n//     getValidToken(){\r\n//         // console.log(`props token ${this.props.token}`);\r\n//         // console.log(`props ${this.props}`);\r\n//         return {\r\n//             headers: {\r\n//                 'Authorization': 'Bearer ' + this.props.token\r\n//               }\r\n//             }\r\n//     }\r\n\r\n//     // setValidToken(){\r\n\r\n//     // }\r\n\r\n//     componentDidMount() {\r\n//         if(this.props.token === null){\r\n//             return\r\n//         }\r\n//         // console.log(`props token ${this.props.token}`);\r\n//         // console.log(`props ${this.props}`);\r\n//         console.log('Im inside the DOM');\r\n//         console.log(`${this.props.token}`);\r\n//         // console.log(`\\ngetValidToken\\n${this.props.token}`);\r\n//         this.props.toggleIsFetching(true);\r\n//         // 'https://social-network.samuraijs.com/api/1.0/users'\r\n//         Axios.get(`http://127.0.0.1:8000/api/users?page=${this.props.currentPage}&limit=${this.props.pageSize}`, this.getValidToken()).then(response => {\r\n\r\n//             // console.log(response.data.data.items);\r\n//             // debugger;\r\n//             //response.data -- all json data\r\n//             // response.data.data -- data from json string\r\n//             // response.data.data.items -- data element to watch all users like in a list\r\n//             response.data.users.items = response.data.users.items.map(user => ({...user, photos:replaceQuotes(user.photos)}))\r\n//             // console.log(response.data);\r\n//             this.props.setUsers(response.data.users.items)\r\n//             // console.log(this.props.users);\r\n//             this.props.toggleIsFetching(false);\r\n//             // console.log(response.data.data.totalCount);\r\n//             this.props.setTotalUsersCount(response.data.users.totalCount)\r\n//         }).catch(function (error) {\r\n//             console.log(error);\r\n//         });\r\n//     }\r\n\r\n//     componentDidUpdate() {\r\n//         // console.log('Im update the DOM');\r\n//         // console.log(`${this.props.token}`);\r\n//     }\r\n\r\n//     onPageChanged = (page) => {\r\n//         console.log(`${this.props.token}`);\r\n\r\n//         this.props.setCurrentPage(page);\r\n//         this.props.toggleIsFetching(true);\r\n//         Axios.get(`http://127.0.0.1:8000/api/users?page=${page}&limit=${this.props.pageSize}`, this.getValidToken()).then(response => {\r\n//             // console.log(response.data.users.items);\r\n//             // debugger;\r\n//             response.data.users.items = response.data.users.items.map(user => ({...user, photos:replaceQuotes(user.photos)}))\r\n//             this.props.setUsers(response.data.users.items)\r\n//             this.props.toggleIsFetching(false);\r\n//         }).catch(function (error) {\r\n//             console.log(error);\r\n//         });\r\n//     }\r\n\r\n//     render() {\r\n//         if(this.props.token === null){\r\n//             return <Redirect to='/login'/>\r\n//         }\r\n\r\n//         return (<>\r\n//         {this.props.isFetching ? <Preloader /> : null}\r\n//         <Users totalUsersCount={this.props.totalUsersCount}\r\n//         pageSize={this.props.pageSize}\r\n//         currentPage={this.props.currentPage}\r\n//         users={this.props.users}\r\n//         onPageChanged={this.onPageChanged}\r\n//         follow={this.props.follow}\r\n//         unfollow={this.props.unfollow}\r\n\r\n//         token={this.props.token}\r\n//         userId={this.props.userId}\r\n\r\n//         />\r\n//         </>)\r\n//     }\r\n\r\n// }\r\n\r\n// const mapStateToProps = (state) => ({\r\n//         users: state.usersPage.users,\r\n//         pageSize: state.usersPage.pageSize,\r\n//         totalUsersCount: state.usersPage.totalUsersCount,\r\n//         currentPage: state.usersPage.currentPage,\r\n//         isFetching: state.usersPage.isFetching,\r\n//         // for fixing followed error (UNauthorized user because of lack token)\r\n//         // selfUserId: state.profilePage.selfUserId,\r\n//         // token: state.profilePage.token,\r\n//         // newPostText: state.profilePage.newPostText\r\n\r\n//         token: state.auth.token,\r\n//         userId: state.auth.userId,\r\n// });\r\n\r\n// const mapDispatchToProps = (dispatch) => {\r\n\r\n    // return {\r\n    //     follow: (userId) => {\r\n    //         dispatch(followAC(userId));\r\n    //     },\r\n    //     unfollow: (userId) => {\r\n    //         dispatch(unfollowAC(userId));\r\n    //     },\r\n    //     setUsers: (users) => {\r\n    //         dispatch(setUsersAC(users));\r\n    //     },\r\n    //     setCurrentPage: (currentPage) => {\r\n    //         dispatch(setCurrentPageAC(currentPage));\r\n    //     },\r\n    //     setTotalUsersCount: (totalUsersCount) => {\r\n    //         dispatch(setTotalUsersCountAC(totalUsersCount));\r\n    //     },\r\n    //     toggleIsFetching: (IsFetching) => {\r\n    //         dispatch(toggleIsFetchingAC(IsFetching));\r\n    //     }\r\n    // }\r\n// }\r\n\r\n\r\n// export default connect(mapStateToProps,\r\n//     {follow, unfollow, setUsers, setCurrentPage, setTotalUsersCount, toggleIsFetching})(UsersContainer);\r\n\r\n// export default UsersContainer;","import { useEffect } from \"react\";\r\nexport const useUsersEffects = (getUsers, searchUsers, query, currentPage, pageSize) => {\r\n    useEffect(() => {\r\n        query==='' ? getUsers(currentPage, pageSize) : searchUsers(currentPage, query);\r\n    }, [currentPage])\r\n\r\n    const onPageChanged = (pageNumber) => {\r\n        query==='' ? getUsers(pageNumber, pageSize) : searchUsers(pageNumber, query);\r\n    }\r\n    return [onPageChanged]\r\n}","/* eslint-disable jsx-a11y/alt-text */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\n\r\nimport React from 'react';\r\nimport s from './../Chats.module.css';\r\nimport styleMessages from './../Message/Message.module.css';\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { convertTime } from '../../common/utils/convertTime';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport { ReduxFormSnippet, createField, Input, DropDownSelect } from '../../common/FormsControls/FormsControls';\r\nimport { maxLength200, maxLength1000 } from '../../../utils/validators/validators';\r\nimport { reduxForm } from 'redux-form';\r\nimport backupQuotes from '../../common/utils/backupQuotes';\r\nimport { useState } from 'react';\r\nimport UsersContainer from '../../Users/UsersContainer';\r\n// import { useUserSelector } from '../ChatsContainer';\r\n\r\n\r\n////////////////////\r\n// const AddChatMemberForm = (props) => {\r\n//     const { handleSubmit, pristine, reset, submitting, error, snusers, chatUsersIds, msgStyle } = props // chatUsersIds - list of ids from chat members\r\n//     // console.log(props)\r\n//     return (\r\n//         <form onSubmit={handleSubmit} className={`${msgStyle} ${s.addBorder}`}>\r\n//         {createField('DropDownSelect', 'dropDownSelect', DropDownSelect, null, {people:  snusers.filter(snuser => !chatUsersIds.includes(snuser.userId))})}\r\n//         <ReduxFormSnippet  pristine={pristine} reset={reset} submitting={submitting} error={error} sumbitButtonName={'Add Member'}/>\r\n//         </form>\r\n//     )\r\n// }\r\n\r\n// const AddChatMemberFormRedux = reduxForm({form: 'addChatMember'})(AddChatMemberForm)\r\n\r\n// export const AddChatMember = ({addMember, chatTypeId, chatId, snusers, chatUsersIds, msgStyle=''}) => {\r\n//     const onSubmit = (formData) => {\r\n//         addMember(chatTypeId, chatId, formData['dropDownSelect'])\r\n//     }\r\n//     return  <AddChatMemberFormRedux onSubmit={onSubmit} snusers={snusers} chatUsersIds={chatUsersIds} msgStyle={msgStyle}/>\r\n// }\r\n////////////////////\r\n\r\n//////////////////// styleMessages.chatsSettingsItemForm\r\n\r\nconst ChangeChatPhotoForm = (props) => {\r\n    const { handleSubmit, pristine, reset, submitting, error, msgStyle } = props\r\n    return ( // className={s.changeChatPhotoForm} chatsSettingsItem\r\n        <form onSubmit={handleSubmit} className={`${msgStyle} ${s.addBorder}`}>\r\n            {createField('Photo', 'photo', Input, [maxLength1000])}\r\n            <ReduxFormSnippet  pristine={pristine} reset={reset} submitting={submitting} error={error} sumbitButtonName={'Change Photo'}/>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ChangeChatPhotoFormRedux = reduxForm({form: 'chageChatPhoto'})(ChangeChatPhotoForm)\r\n\r\n\r\nexport const ChangeChatPhoto = ({setChatPhotoRequest, chatTypeId, chatId, msgStyle=''}) => {\r\n    const onSubmit = (formData) => { // or JSON.stringify\r\n        let newPhotoObject = backupQuotes({'large': null, 'small': formData['photo']})\r\n        setChatPhotoRequest(chatTypeId, chatId, newPhotoObject)\r\n    }\r\n    return  <ChangeChatPhotoFormRedux onSubmit={onSubmit} msgStyle={msgStyle}/>\r\n}\r\n////////////////////\r\n\r\n//////////////////// {styleMessages.chatsSettingsItem}\r\nconst RenameChatForm = (props) => {\r\n    const { handleSubmit, pristine, reset, submitting, error, msgStyle } = props\r\n    // let msgStyle = styleMessageClass ? styleMessages.chatsSettingsItemForm : ''\r\n    return ( // className={s.renameChatForm}\r\n        <form onSubmit={handleSubmit} className={`${msgStyle} ${s.addBorder}`}>\r\n            {createField('Name', 'name', Input, [maxLength200])}\r\n            <ReduxFormSnippet  pristine={pristine} reset={reset} submitting={submitting} error={error} sumbitButtonName={'Rename Chat'}/>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst RenameChatFormRedux = reduxForm({form: 'renameChat'})(RenameChatForm)\r\n\r\nexport const RenameChat = ({renameChatRequest, chatTypeId, chatId, msgStyle=''}) => {\r\n    const onSubmit = (formData) => {\r\n        renameChatRequest(chatTypeId, chatId, formData['name'])\r\n    }\r\n    return  <RenameChatFormRedux onSubmit={onSubmit} msgStyle={msgStyle}/>\r\n}\r\n////////////////////\r\n\r\n// setMembersShow(event);\r\nexport const Member = ({ member, memberStyle, chatMemberSettings=null, setMemberOperShow=null, setSelectedMember=null }) => {\r\n    return (\r\n        <>\r\n        <div className={memberStyle}>\r\n            <NavLink to={'/profile/' + member.id}>\r\n                <div className={s.memberName}>{member.name}</div>\r\n                <div className={s.memberPhoto}><img src={member.photos.small} alt='Ava' /></div>\r\n            </NavLink>\r\n            {chatMemberSettings ? <a className={chatMemberSettings} onClick={(event) => {setSelectedMember(member.id); setMemberOperShow(event)}}>Operations</a>: null}\r\n        </div>\r\n        {/* <br/> */}\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport const Members = ({members, membersShow, memberOperShow, selectedMember, memberOpers}) => { // <Member />\r\n    \r\n    return(\r\n        <>\r\n\r\n        <div className={membersShow ? styleMessages.chatsMembersActive : styleMessages.chatsMembers}>\r\n            <div className={membersShow ? styleMessages.chatsMembersActive : styleMessages.chatsMembers}>{members}</div>\r\n        </div>\r\n        \r\n        <div className={memberOperShow ? `${styleMessages.smthElseListActive}`: `${s.smthElseList}`}>\r\n            \r\n            {memberOpers.map(memberOper => \r\n                <div className={`${styleMessages.subElemMSBs} ${styleMessages.infoItemMSBs}`}>\r\n                    <a className={`${styleMessages.membOperLink}`} onClick={memberOper.method(selectedMember)}>{memberOper.name}</a>\r\n                </div>\r\n            )}\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport const SelectMemberToChat = (props) => {\r\n\r\n    const onSubmit = (selectedForChatUser) => {\r\n        console.log('pre api')\r\n        props.addMember(props.chatTypeId, props.chatId, selectedForChatUser)\r\n    }\r\n\r\n    return (\r\n        <div  className={s.getMemberList} onClick={(event)=>{event.stopPropagation();}}>\r\n        <UsersContainer\r\n        setSelectedForChatUser = {onSubmit} \r\n        forChat={true} \r\n        styleForUsers={styleMessages.usersForChatActive} \r\n        styleForUser={styleMessages.userForChat}\r\n        fWAUFC={props.fWAUFC}\r\n        clearCurrentFocusedWindow={props.clearCurrentFocusedWindow}\r\n        // setUsersForChatShow={setUserForChatShow}\r\n        // toogleFocuseElemArr={toogleFocuseElemArr} // при выборе юзер - закрываем окно\r\n        chatUsersIds={props.chatUsersIds}  \r\n        />\r\n      </div>\r\n    )\r\n}\r\n\r\n\r\nconst LastMessage = ({ sended, body, authorName }) => {\r\n    return (\r\n        <>\r\n            <div className={s.chatLMAuthorName}>{authorName} </div>\r\n            <div className={s.chatLMAuthorNameDotted}>:</div>\r\n            {/* <div className={s.chatLMBody}>{body.length > 30 ? `${ body.slice(0,27)}...`: body}</div>\r\n             */}\r\n                <div className={s.chatLMBody}>{body}</div>\r\n            <div className={s.chatLMSended}>{convertTime(sended)}</div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nconst ChatItem = ({ lastMessage, getCountOfNewGlobalMsgs, members, chatType, name, setCurrentChatData, chatTypeId, chatId, chatPhotoSmall, isFetching, \r\n                    clearChatMyLocal, clearChatMyGlobal, clearChatAllLocal, clearChatAllGlobal,\r\n                    renameChatRequest, deleteChatRequest, addMember, setChatPhotoRequest,\r\n                    ...props  \r\n                }) => {\r\n\r\n\r\n    const unmout = () => {\r\n        setCurrentChatData(chatTypeId, chatId)\r\n    }\r\n\r\n    const clearChatByMethod = (method) => {\r\n        // debugger\r\n        method(chatTypeId, chatId)\r\n    }\r\n\r\n    // const putChatByMethod = (method, putData) => {\r\n    //     method(chatTypeId, chatId, putData)\r\n    // }\r\n\r\n    let path = `/chats/${chatType}/${name}/`\r\n    let chatUsersIds = members.map(member => member.id)\r\n    members = members.map(member => <Member member={member} key={member.id} memberStyle={`${s.member} ${s.subElem2}`} />)\r\n    if(isFetching) return <Preloader />\r\n    // console.log(userForChatShow)\r\n    \r\n    return (\r\n        <>\r\n        {\r\n        // add member\r\n        props.fWAUFC.data !== null && props.fWAUFC.data[1] === chatId && props.fWAUFC.data[0] === chatTypeId  &&\r\n            <div className={s.addMember}>\r\n                <div className={s.addMemberHeader}>\r\n                <SelectMemberToChat addMember={addMember} chatTypeId={chatTypeId} chatId={chatId} chatUsersIds={chatUsersIds}\r\n                    clearCurrentFocusedWindow={props.clearCurrentFocusedWindow} \r\n                    fWAUFC={props.fWAUFC}/>\r\n                 </div>\r\n            </div>\r\n                }\r\n\r\n\r\n\r\n\r\n        <div className={s.chatItem}>\r\n            <NavLink to={path} className={s.chatItemData} onClick={unmout}>\r\n                <div className={s.chatItemPhoto}>\r\n                    {/* <img src={(chatPhoto==='') ? (chatTypeId===0) ? members.find(member=>userId!==member.id).photos.small : 'chatPhoto' : chatPhoto} alt='chatPhoto'/> */}\r\n                    {chatPhotoSmall !== null ? <img src={chatPhotoSmall} /> : <div className=''>chatPhotoSmall</div>}\r\n                </div>\r\n                    {/* lastMessage: */}\r\n                    {Object.keys(lastMessage).length > 0 ? <LastMessage sended={lastMessage.sended} body={lastMessage.body} key={lastMessage.id} authorName={lastMessage.authorName} /> : null}\r\n                <div className={s.chatItemNewMsgsNum}>{getCountOfNewGlobalMsgs}</div>\r\n\r\n                <div className={s.chatItemName}>\r\n                    {name}\r\n                </div>\r\n            </NavLink>\r\n                <div className={s.chatSettings}>\r\n                Settings:\r\n                    <div className={s.chatSettingsHeader}>\r\n                        <div className={s.chatSettingsMembersListHeader}>\r\n                            members:\r\n                            <div className={s.chatSettingsMembersList}>\r\n                                {members}\r\n                            </div>\r\n                        </div>\r\n                        <div className={s.smthElseHeader} >\r\n                                clear chat:\r\n                                <div className={s.smthElseList}>\r\n                                        <div className={`${s.subElem} ${s.infoItem}`}><button onClick={() => clearChatByMethod(clearChatMyLocal)}>Clear My Messages Locally</button></div>\r\n                                        <div className={`${s.subElem} ${s.infoItem}`}><button onClick={() => clearChatByMethod(clearChatMyGlobal)}>Clear My Messages Globally</button></div>\r\n                                        <div className={`${s.subElem} ${s.infoItem}`}><button onClick={() => clearChatByMethod(clearChatAllLocal)}>Clear All Messages Locally</button></div>\r\n                                        <div className={`${s.subElem} ${s.infoItem}`}><button onClick={() => clearChatByMethod(clearChatAllGlobal)}>Clear All Messages Globally</button></div>\r\n                                </div>\r\n                        </div>\r\n                        <div className={s.renameChatHeader}>\r\n                            rename\r\n                            { chatTypeId === 1 && <div className={s.renameChatItem}>\r\n                                <RenameChat renameChatRequest={renameChatRequest} chatTypeId={chatTypeId} chatId={chatId}/>\r\n                            </div>}\r\n                            \r\n                        </div>\r\n                        <div className={s.smthElseHeader}>\r\n                            other operations\r\n                            <div className={s.smthElseList}>\r\n                                    <div className={`${s.subElem} ${s.infoItem}`}>\r\n                                        set photo\r\n                                        { chatTypeId === 1 && <div className={s.changePhotoChat}>\r\n                                            <ChangeChatPhoto setChatPhotoRequest={setChatPhotoRequest} chatTypeId={chatTypeId} chatId={chatId}/>\r\n                                        </div>}\r\n                                    </div>\r\n\r\n                                    <div className={`${s.subElem} ${s.infoItem}`}>\r\n                                        \r\n\r\n                                        \r\n                                    { chatTypeId === 1 &&\r\n                                    <div className={s.addMemberItem}>\r\n                                    { props.fWAUFC.data === null  && // make true from false to open element ( but i should push here userId and after by userId show itself user list)\r\n                                        <a \r\n                                        onClick={\r\n                                            (event) => (event.stopPropagation(), props.addFocusedWindow(props.fWAUFC.id, [chatTypeId, chatId]))\r\n                                         }> \r\n                                            Add Member\r\n                                        </a>\r\n                                    }\r\n                                    </div>\r\n                                    }\r\n                                    </div>\r\n\r\n                                    <div className={`${s.deleteChat} ${s.subElem} ${s.infoItem}`}><button onClick={() => clearChatByMethod(deleteChatRequest)}>DELETE CHAT</button></div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n        </div> \r\n        </>)\r\n}\r\n\r\nexport default ChatItem;\r\n\r\n\r\n// chatItemMemberList - всплывающий список ( при нажатии с прокруткой ( или при наведении))","import { createSelector } from \"reselect\";\r\nimport replaceQuotes from \"../components/common/utils/quotes\";\r\n\r\n\r\nexport const selectChatsPrimitiveSelector = state => {\r\n    return  state.chatsPage.chats;//.filter(u => true);\r\n}\r\nexport const selectChats = createSelector( selectChatsPrimitiveSelector, (chats) => {\r\n        return chats.map(chat => ({...chat, members: chat.members.map(member => ({...member, photos: replaceQuotes(member.photos)})), chatPhoto: replaceQuotes(chat.chatPhoto)}))\r\n})\r\n\r\n\r\nexport const selectChatMessages = state => {\r\n    return  state.chatsPage.messages;//.filter(u => true);\r\n}\r\n\r\n\r\nexport const selectCTIPS = state => {\r\n    return state.chatsPage.chatTypeId;\r\n}\r\nexport const selectCIPS = state => {\r\n    return state.chatsPage.chatId;\r\n}\r\n\r\nexport const selectCurrentChatPS = state => {\r\n    return  state.chatsPage.currentChat\r\n}\r\n\r\nexport const selectCurrentChat = createSelector( selectCurrentChatPS, (chat) => {\r\n    return chat!==null ? {...chat, members: chat.members.map(member => ({...member, photos: replaceQuotes(member.photos)})), chatPhoto: replaceQuotes(chat.chatPhoto)} : null\r\n})\r\n\r\n\r\n\r\n\r\nexport const selectFocusedWindowsPS = state => {\r\n    return  state.app.focusedWindows;//.filter(u => true);\r\n}\r\nexport const selectFocusedWindowsIdsPS = state => {\r\n    return  state.app.focusedWindowsIds;//.filter(u => true);\r\n}\r\n\r\nexport const selectFocusedWindow = (windowIdKey) => createSelector( selectFocusedWindowsPS, selectFocusedWindowsIdsPS,  (focusedWindows, focusedWindowsIds) => {\r\n    // debugger\r\n    return focusedWindows.find(window => window.id === focusedWindowsIds[windowIdKey]) || {'id': focusedWindowsIds[windowIdKey], 'data': null} // {'id':, 'data'}\r\n})\r\n\r\nexport const selectFocusedWindowUsersForChat = selectFocusedWindow(\"fWUsersFCId\")\r\nexport const selectFocusedWindowAddUserForChat = selectFocusedWindow(\"fWAddUserFCId\")\r\nexport const selectFocusedWindowMembersForChat = selectFocusedWindow(\"fWMembersId\")\r\nexport const selectFocusedWindowMemberOperationsForChat = selectFocusedWindow(\"fWMemberOperationsId\")","// import {authAPI} from \"../api/api\";\r\nimport { getAuthUserData, setAuthUserData } from \"./auth-reducer\";\r\n\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS';\r\nconst ADD_FOCUSED_WINDOW = 'SET_FOCUSED_WINDOWS';\r\nconst CLEAR_FOCUSED_WINDOWS = 'CLEAR_FOCUSED_WINDOWS';\r\nconst CLEAR_CURRENT_FOCUSED_WINDOW = 'CLEAR_CURRENT_FOCUSED_WINDOW';\r\n\r\nlet initialState = {\r\n    initialized: false,\r\n    focusedWindows: [],\r\n    focusedWindowsIds: {fWUsersFCId: 0, fWAddUserFCId: 1, fWMembersId: 2, fWMemberOperationsId: 3}\r\n};\r\n\r\nconst appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n        case ADD_FOCUSED_WINDOW:\r\n\r\n            return {\r\n                ...state,\r\n                focusedWindows: [...state.focusedWindows, action.newFocusedWindow]\r\n            }\r\n\r\n        case CLEAR_FOCUSED_WINDOWS:\r\n            // debugger\r\n                return {\r\n                    ...state,\r\n                    focusedWindows: []\r\n                }\r\n        \r\n        case CLEAR_CURRENT_FOCUSED_WINDOW: \r\n            // debugger\r\n            return {\r\n                ...state,\r\n                focusedWindows: state.focusedWindows.filter(window=> window.id !== action.currentWindowId)\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const initializedSuccess = () => ({type: INITIALIZED_SUCCESS })\r\n\r\nexport const addFocusedWindow = (id, data) => ({type: ADD_FOCUSED_WINDOW, newFocusedWindow: {id: id, data: data} }) // id, data\r\nexport const clearAllFocusedWindows = () => ({type: CLEAR_FOCUSED_WINDOWS})\r\nexport const clearCurrentFocusedWindow = (currentWindowId) => ({type: CLEAR_CURRENT_FOCUSED_WINDOW, currentWindowId})\r\n\r\n\r\nexport const initializeApp = () => (dispatch) => {\r\n    // debugger \r\n    Promise.all([dispatch(getAuthUserData())])\r\n    .then( resolve => {\r\n        // debugger\r\n        // console.log('hui')\r\n        dispatch(initializedSuccess());\r\n    }).catch(error => \r\n        {\r\n            // debugger\r\n            if([\"Signature has expired.\", \"Error decoding signature.\", \"Invalid Authorization header. No credentials provided.\"].includes(error.response.data.detail)){\r\n                // console.log(error.response.data.detail)\r\n                // delete localStorage['token']\r\n                // dispatch(setAuthUserData(null, null, null, false, true))\r\n            } else {\r\n                console.log('its amaizing error - server error')\r\n            }\r\n            dispatch(initializedSuccess());\r\n            // dispatch(initializedSuccess());\r\n            // dispatch(getAuthUserData());\r\n        }\r\n        ).catch(error => {\r\n            console.log('you gonna die')\r\n            dispatch(initializedSuccess());\r\n        });\r\n    \r\n    // authAPI.me()\r\n    //     .then(response => {\r\n    //         if (response.data.resultCode === 0) {\r\n    //             let {id, login, email} = response.data.data;\r\n    //             dispatch(initializedSuccess());\r\n    //         }\r\n    //     });\r\n}\r\n\r\n\r\nexport default appReducer;","// import React from 'react';\r\n// import {sendMessageCreator, updateNewMessageBodyCreator} from \"../../redux/dialogs-reducer\";\r\n// import Dialogs from \"./Dialogs\";\r\n// import {connect} from \"react-redux\";\r\n// import { Redirect, withRouter } from 'react-router-dom';\r\n\r\n// class DialogsContainer extends React.Component {\r\n//     componentDidMount() {\r\n//         console.log('Im inside the DOM');\r\n//         console.log(`${this.props.token}`);\r\n//     }\r\n//     render() {\r\n//         if(this.props.token === null){\r\n//             return <Redirect to='/login'/>\r\n//         }\r\n//         return (\r\n//             <Dialogs {...this.props}/>\r\n//         )\r\n//     }\r\n// }\r\n\r\n// let mapStateToProps = (state) => {\r\n//     return {\r\n//         dialogsPage: state.dialogsPage,\r\n//         token: state.auth.token\r\n//     }\r\n// }\r\n// let mapDispatchToProps = (dispatch) => {\r\n//     return {\r\n//         sendMessage: () => {\r\n//             dispatch(sendMessageCreator());\r\n//         },\r\n//         updateNewMessageBody: (body) => {\r\n//             dispatch(updateNewMessageBodyCreator(body));\r\n//         }\r\n//     }\r\n// }\r\n\r\n// let WithURLDialogsContainer = withRouter(DialogsContainer);\r\n// // const DialogsContainer = \r\n// export default connect(mapStateToProps, mapDispatchToProps)(WithURLDialogsContainer);\r\n\r\n// // export default DialogsContainer;\r\n\r\n// eslint-disable react/jsx-no-duplicate-props\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { compose } from 'redux';\r\nimport withAuthRedirect from '../../hoc/WithAuthRedirect';\r\nimport { connect } from 'react-redux';\r\nimport { setCurrentChatData, unSetCurrentChatData, getChats, \r\n        clearChatMyLocal, clearChatMyGlobal, clearChatAllLocal, clearChatAllGlobal, createConversation, createDialog, \r\n        // requestUsersForChat, \r\n        renameChatRequest, setChatPhotoRequest, addMember, deleteChatRequest } from '../../redux/chats-reducer';\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport ChatItem from './ChatItem/ChatItem';\r\nimport chatsStyles from './Chats.module.css';\r\nimport { selectChats, selectFocusedWindowUsersForChat, selectFocusedWindowAddUserForChat, selectFocusedWindowMembersForChat, selectFocusedWindowMemberOperationsForChat } from '../../redux/chats-selector';\r\n\r\nimport { withRouter } from 'react-router-dom';\r\nimport { reduxForm, formValues } from 'redux-form';\r\nimport { createField, Input, ReduxFormSnippet } from '../common/FormsControls/FormsControls';\r\nimport { maxLength200 } from '../../utils/validators/validators';\r\n \r\nimport styleMessages from './Message/Message.module.css';\r\nimport UsersContainer from '../Users/UsersContainer';\r\nimport { useRefactorPopUp } from '../../customHooks/focusedElems';\r\nimport { clearCurrentFocusedWindow, addFocusedWindow } from '../../redux/app-reducer';\r\n\r\n\r\nconst CreateChatForm = (props) => {\r\n    const { handleSubmit, pristine, reset, submitting, error} = props\r\n    // const MyItemizedList = [19, 20]\r\n    // const ItemList = formValues('selectedMembers')(MyItemizedList)\r\n    // const [selected, setSelected] = useState([]);\r\n    // // snusers, myUserId\r\n    // const options = snusers\r\n    //                 .filter(snuser => snuser.userId !== myUserId)\r\n    //                 .map(snuser => ({label: snuser.name, value: snuser.id}))\r\n    return (\r\n        <form onSubmit={handleSubmit} className={chatsStyles.createChatForm}>\r\n            {/* {createField('DropDownSelect', 'dropDownSelect', DropDownSelect, null, {people: snusers.filter(snuser => snuser.userId !== myUserId)})} */}\r\n            \r\n            {/* {createField('SelectedMembers', 'selectedMembers', MultiSelectWrap, null, \r\n                { optionsMS: options, \r\n                    valueMS:selected, \r\n                    onChangeMS:setSelected, \r\n                    labelledByMS:\"Select\"  })} */}\r\n            {/* {createField('SelectedMembers', 'selectedMembers', ForChatUsersListWrap, null)} */}\r\n            \r\n            {createField('Name', 'name', Input, [maxLength200])}\r\n            <ReduxFormSnippet  pristine={pristine} reset={reset} submitting={submitting} error={error} sumbitButtonName={'Create Chat'}/>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst CreateChatReduxForm = reduxForm({form:'CreateChat'})(CreateChatForm)\r\n\r\n\r\n\r\n \r\nexport const useUsersSelector = (callbackMethod, keys=[]) => { // ['name'] // props.createConversation\r\n    const [selectedForChatUsers, setSelectedForChatUsers] = useState([])\r\n\r\n    const onSubmit = (formData) => { // keys = ['name', 'photos']\r\n        // debugger\r\n        // let sns = Array.isArray(formData['dropDownSelect']) ? formData['dropDownSelect']: [formData['dropDownSelect']]\r\n        // let sns = Array.isArray(selectedForChatUsers) ? selectedForChatUsers: selectedForChatUsers\r\n        callbackMethod(selectedForChatUsers, ...keys.map(key=>formData[key])) // if select for create chat -> keys are not null - else null (fro add member to chat)\r\n    }\r\n    return [selectedForChatUsers, setSelectedForChatUsers, onSubmit]\r\n\r\n}\r\n\r\n// export const useUserSelector = (chatTypeId, chatId, callbackMethod) => { //props.addMember\r\n//     const [selectedForChatUser, setSelectedForChatUser] = useState(null)\r\n//     const onSubmit = async() => {\r\n//         console.log('pre api')\r\n//         await callbackMethod(chatTypeId, chatId, selectedForChatUser)\r\n//     }\r\n\r\n//     // useEffect(() => {\r\n//     //     if(selectedForChatUser!==null){\r\n//     //         console.log(\"adding\")\r\n//     //         onSubmit()\r\n//     //         setSelectedForChatUser(null) \r\n//     //     } else {\r\n//     //         console.log(\" notadding\")\r\n//     //     }\r\n//     // }, [selectedForChatUser])\r\n//     return [setSelectedForChatUser ]\r\n// }\r\n\r\n\r\n\r\nconst ChatsContainer = (props) => {\r\n    const [iF, setIF]= useState(true) // isFetching\r\n    // const [iF2, setIF2]= useState(true) // isFetching\r\n    const [selectedForChatUsers, setSelectedForChatUsers, onSubmit] = useUsersSelector(props.createConversation, ['name'])\r\n\r\n    const refreshData = () => {\r\n        // if (!iF2) {\r\n        console.log('start refresh')\r\n        setTimeout(async() =>{await props.getChats()}, 5000) // так как обновелния в чатах могут быть и не только с моей стороны но и с чужой\r\n        console.log('end refresh')\r\n        // }\r\n    }\r\n\r\n    useEffect(() => {\r\n        const fetchData = async() => {\r\n            if(iF){\r\n                props.unSetCurrentChatData()\r\n                await props.getChats()\r\n                setIF(false)\r\n            }\r\n            // if(iF2){\r\n            //     await props.requestUsersForChat()\r\n            //     setIF2(false)\r\n            // }\r\n        }\r\n        fetchData();\r\n    }, [props, iF])//, iF2])\r\n\r\n    useEffect(() => {\r\n        refreshData();\r\n        console.log('effect refresh used by changing: ')\r\n    }, [props])\r\n\r\n\r\n    // if(iF || iF2) return <Preloader/>\r\n    if(iF) return <Preloader/>\r\n    // key `${chat.chatType}_${chat.name}`\r\n    // let chatsElements = [...(props.chats.filter(chat => !('sended' in chat.lastMessage))).sort((a,b)=>b.chatId - a.chatId), ...props.chats\r\n    //         .filter(chat => 'sended' in chat.lastMessage) // if this is the chat with existing msgs within\r\n    //         .sort((chat1, chat2)=> (chat2.lastMessage.sended - chat1.lastMessage.sended))]\r\n    let chatsElements = props.chats\r\n            .map(chat => <ChatItem lastMessage={chat.lastMessage} \r\n                getCountOfNewGlobalMsgs={chat.getCountOfNewGlobalMsgs} \r\n                members={chat.members} name={chat.name} \r\n                chatType={chat.chatType} chatId={chat.chatId} \r\n                chatTypeId={chat.chatTypeId} key={chat.id}\r\n                setCurrentChatData={props.setCurrentChatData}\r\n                chatPhotoSmall = {chat.chatPhoto.small} \r\n                isFetching={props.isFetching} \r\n                // currentChatDataFetching={props.currentChatDataFetching} \r\n                clearChatMyLocal={props.clearChatMyLocal} clearChatMyGlobal={props.clearChatMyGlobal} clearChatAllLocal={props.clearChatAllLocal} clearChatAllGlobal={props.clearChatAllGlobal}\r\n                renameChatRequest={props.renameChatRequest}\r\n                setChatPhotoRequest={props.setChatPhotoRequest}\r\n                addMember={props.addMember}\r\n                // snusers={props.OLDsnusers}\r\n                deleteChatRequest={props.deleteChatRequest}\r\n\r\n                fWAUFC={props.fWAUFC}\r\n                clearCurrentFocusedWindow={props.clearCurrentFocusedWindow}\r\n                addFocusedWindow={props.addFocusedWindow}\r\n\r\n                />);\r\n \r\n\r\n    return(\r\n        <>\r\n        <div className={chatsStyles.chats}>\r\n            <div className={chatsStyles.chats_header}>Chats</div>\r\n            <div className={chatsStyles.createChat}>\r\n            <div className={chatsStyles.createChatHeader}>Create Conversation\r\n                {selectedForChatUsers.length > 1 && <CreateChatReduxForm onSubmit={onSubmit} snusers={props.snusers} myUserId={props.myUserId} /> }\r\n\r\n                {props.fWUFC.data !== null ?\r\n                    \r\n                    <div  className={chatsStyles.getMemberList} onClick={(event)=>{event.stopPropagation();}}>\r\n                        <UsersContainer\r\n\r\n                        setSelectedForChatUsers={setSelectedForChatUsers} forChat={true} \r\n                        selectedForChatUsers={selectedForChatUsers} \r\n                        styleForUsers={styleMessages.usersForChatActive} styleForUser={styleMessages.userForChat}\r\n                        clearCurrentFocusedWindow={props.clearCurrentFocusedWindow}\r\n                        fWUFCID = {props.fWUFC.id}\r\n                        toogleFocuseElem={props.toogleFocuseElem}\r\n\r\n                        />\r\n\r\n                        {selectedForChatUsers.length === 1 &&  \r\n                            <a onClick={() => {props.createDialog(selectedForChatUsers[0]); props.clearCurrentFocusedWindow(props.fWUFC.id); }}>Create Dialog</a>}\r\n                    </div>\r\n\r\n                :\r\n                 \r\n                    <a className={chatsStyles.getMemberList}  \r\n                    onClick={\r\n                        (event)=>{event.stopPropagation();\r\n                        props.addFocusedWindow(props.fWUFC.id, true);\r\n                    }}>\r\n                            Choose Users for Chat\r\n                    </a>\r\n\r\n                }\r\n\r\n                {/* {props.usersForChatShow ? \r\n                <div  className={chatsStyles.getMemberList} onClick={(event)=>{event.stopPropagation();}}>\r\n                    <UsersContainer\r\n\r\n                    setSelectedForChatUsers={setSelectedForChatUsers} forChat={true} \r\n                    selectedForChatUsers={selectedForChatUsers} \r\n                    styleForUsers={styleMessages.usersForChatActive} styleForUser={styleMessages.userForChat}\r\n\r\n                    usersForChatShow={props.usersForChatShow}\r\n                    setUsersForChatShow={props.setUsersForChatShow}\r\n                    toogleFocuseElem={props.toogleFocuseElem}/>\r\n\r\n                    {selectedForChatUsers.length === 1 && <a onClick={() => {props.createDialog(selectedForChatUsers[0])}}>Create Dialog</a>}\r\n                    </div>\r\n                    // <div className={styleMessages.usersForChatActive}>\r\n                    :\r\n                    <a className={chatsStyles.getMemberList} \r\n                        onClick={props.toogleFocuseElem(props.setUsersForChatShow, props.usersForChatShow)}>\r\n                            Choose Users for Chat\r\n                    </a>\r\n                } */}\r\n\r\n\r\n\r\n            </div>\r\n            </div>\r\n                <div className={chatsStyles.chatsItems}>\r\n                    {chatsElements}\r\n                </div>\r\n        </div>\r\n        \r\n        </>\r\n    )\r\n}\r\n// can be lastMessage ={} if no msgs yet, \r\n\r\n\r\nlet mapStateToProps = (state) => ({\r\n    chats: selectChats(state),\r\n    isAuth: state.auth.isAuth,\r\n    isFetching: state.chatsPage.isFetching,\r\n    isUnmount: state.chatsPage.isUnmount,\r\n    myUserId: state.auth.userId,\r\n    OLDsnusers: state.chatsPage.usersToSelect, // по-сути должны быть все)))))))) TODO но асинхронно подгружатся\r\n    // state.chatsPage.membersToSelect <- getUsers(page) (subs requestUsersForChat) TODO\r\n    // chatPhotoSmall: selectChatPhotoSmall(state)\r\n    // userId: state.auth.userId,\r\n    // id - data\r\n    fWUFC: selectFocusedWindowUsersForChat(state),\r\n    fWAUFC: selectFocusedWindowAddUserForChat(state),\r\n    fWMFC: selectFocusedWindowMembersForChat(state),\r\n    fWMOFC: selectFocusedWindowMemberOperationsForChat(state),\r\n\r\n\r\n})\r\n\r\nexport default compose(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, {getChats, setCurrentChatData, unSetCurrentChatData,\r\n        clearChatMyLocal, clearChatMyGlobal, clearChatAllLocal, clearChatAllGlobal,\r\n        createDialog, createConversation, \r\n        // requestUsersForChat,\r\n        renameChatRequest, addMember, setChatPhotoRequest, deleteChatRequest,\r\n\r\n        addFocusedWindow, clearCurrentFocusedWindow,\r\n    }),\r\n    withRouter\r\n)(ChatsContainer);\r\n\r\n\r\n//currentChatDataFetching\r\n","import {profileAPI, authAPI} from \"../api/api\";\r\nimport { stopSubmit } from \"redux-form\";\r\nimport replaceQuotes from \"../components/common/utils/quotes\";\r\nimport authReducer from \"./auth-reducer\";\r\n// import backupQuotes from \"../components/common/utils/backupQuotes\";\r\n// const ADD_POST = 'ADD-POST';\r\n// const UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT';\r\n// const SET_USER_PROFILE = 'SET_USER_PROFILE';\r\n// const SET_USER_JWTTOKEN = 'SET_USER_JWTTOKEN';\r\n// const SET_SELF_USER_ID = 'SET_SELF_USER_ID';\r\n\r\n\r\n// must be 8\r\nconst ADD_POST = 'ADD-POST';\r\nconst DELETE_POST = 'DELETE_POST';\r\n\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\r\nconst UPDATE_PROFILE = 'UPDATE_USER_PROFILE';\r\n// const DELETE_PROFILE = 'DELETE_USER_PROFILE';\r\n\r\nconst SET_STATUS = 'SET_STATUS';\r\nconst SET_PHOTO = 'SET_PHOTO';\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Hi, how are you?', likesCount: 12},\r\n        {id: 2, message: 'It\\'s my first post', likesCount: 11},\r\n        {id: 3, message: 'Blabla', likesCount: 11},\r\n        {id: 4, message: 'Dada', likesCount: 11}\r\n    ],\r\n    // newPostText: 'it-kamasutra.com',\r\n    profile: null,\r\n    status: \"\"\r\n};\r\n\r\n\r\nconst profileReducer = (state = initialState, action) => {\r\n\r\n    switch(action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n            };\r\n        }\r\n        case DELETE_POST: {\r\n            return {...state, posts: state.posts.filter(p => p.id !== action.postId)}\r\n        }\r\n\r\n        case SET_USER_PROFILE: {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        // when we update subobject - we just add other old subproperties that dont updated \r\n        case UPDATE_PROFILE: { // нет проверки на правильность ключей (имен полей обьекта профайл) - если на серваке прошло, то точно верны все ключи по идее\r\n            return {...state,\r\n                    profile: \r\n                    {...state.profile,\r\n                    ...action.profileData,\r\n                    photos: {...state.profile.photos, ...action.profileData.photos},\r\n                    contacts: {...state.profile.contacts, ...action.profileData.contacts}\r\n                    }\r\n                }\r\n        }\r\n        // case DELETE_PROFILE: {\r\n        //     return {...state, posts: [], profile: null, status: ''}\r\n        // }\r\n\r\n        case SET_STATUS: {\r\n            // return {...state, status: action.status}\r\n            return {...state, profile: { ...state.profile, status: action.status} }\r\n        }\r\n        case SET_PHOTO: {\r\n            return {...state, profile: {...state.profile, photos: action.photos}}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n// no API yet ( no likes api, no posts api, no polls api, no comments api)\r\nexport const addPost = (newPostText) => ({type: ADD_POST, newPostText})\r\nexport const deletePost = (postId) => ({type: DELETE_POST, postId})\r\n\r\n// no API hidden layer of action\r\nexport const setUserProfile = (profile) => ({type: SET_USER_PROFILE, profile})\r\nexport const setStatus = (status) => ({type: SET_STATUS, status})\r\nexport const setPhoto = (photos) => ({type: SET_PHOTO, photos})\r\nexport const setUpdateUserProfile = (profileData) => ({type: UPDATE_PROFILE, profileData})\r\n\r\n// API actions\r\nexport const getUserProfile = (userId) => async(dispatch) => {\r\n    // debugger\r\n    let response = await profileAPI.getProfile(userId)\r\n    if (response.data.resultCode === 0){\r\n        let profile = response.data.data;\r\n        profile.photos = replaceQuotes(profile.photos);\r\n        profile.contacts = replaceQuotes(profile.contacts);\r\n        dispatch(setUserProfile(profile));\r\n        // return response.data.data\r\n    }\r\n}\r\n\r\nexport const updateUserProfile = (profileData) => async(dispatch) => {\r\n    // debugger\r\n    // profileData = backupQuotes(profileData)\r\n    let response = await profileAPI.updateProfile(profileData)\r\n    if(response.data.resultCode === 0){\r\n        let profile = response.data.data\r\n        if('photos' in profile){\r\n            profile.photos = replaceQuotes(profile.photos);\r\n        }\r\n        if ('contacts' in profile){\r\n            profile.contacts = replaceQuotes(profile.contacts);\r\n        }\r\n        dispatch(setUpdateUserProfile(profile))\r\n    } else {\r\n        let message = response.data.messages.length  ? response.data.messages[0] : 'Some error';\r\n        dispatch(stopSubmit(\"updateProfile\", {_error: message}));\r\n    }\r\n}\r\n// fields to change\r\n\r\n// \"name\",\r\n// \"status\",\r\n// \"photos\",\r\n// \"lookingForAJob\",\r\n// \"lookingForAJobDescription\",\r\n// \"fullname\",\r\n// \"contacts\"\r\n\r\n// export const setDeleteUserProfile = () => ({type: DELETE_PROFILE})\r\nexport const deleteUserProfile = () => async(dispatch) => {\r\n    let response = profileAPI.deleteProfile()\r\n    if(response.data.resultCode === 0){\r\n        dispatch(setUserProfile(null))\r\n        authReducer.logout()\r\n        // delete state data and token ????\r\n        // reidrect login???\r\n        // if profile === null -> rerender all and redirect login (solved)\r\n    } else {\r\n        //  в случае ошибки от АПИ, все равно возможно юзер удален но возникла ошибка позднее его удаления,\r\n        // потому, если мы до сих пор залогинены \r\n        // (тоесть наш текущий токен валиден на стороне сервака апи), значит не было удаления пользователя\r\n        let authResponse = await authAPI.me() \r\n        if(authResponse.data.resultCode !== 0){ //  а если не валиден - юзер удален - очищаем данные\r\n            dispatch(setUserProfile(null))\r\n            authReducer.logout()\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// export const getStatus = (userId) => async(dispatch) => {\r\n//     let response =  await profileAPI.getStatus(userId);\r\n//     if(response.data.resultCode === 0){\r\n//         dispatch(setStatus(response.data.data));\r\n//     } // if subs to redux-form  -> + stopSubmit\r\n// }\r\n\r\n// there is the only place we dont want to say the user that there is was an error in sataus update\r\nexport const updateStatus = (status) => async(dispatch) => {\r\n    let response =  await profileAPI.updateStatus(status); //  без оповещения юзеру об ошибке в отправке на апи\r\n    console.log(response);\r\n    if( response.data.resultCode === 0 ){\r\n        dispatch(setStatus(status));\r\n    }\r\n}\r\n\r\nexport const updatePhoto = (photo) => async(dispatch) => {\r\n    let response =  await profileAPI.updatePhoto(photo);\r\n    if( response.data.resultCode === 0 ){\r\n        dispatch(setPhoto(photo));\r\n    } else {\r\n        let message = response.data.messages.length  ? response.data.messages[0] : 'Some error';\r\n        dispatch(stopSubmit(\"updatePhoto\", {_error: message}));\r\n    }\r\n}\r\n\r\n\r\n\r\n// export const setUserJWTToken = (token) => ({type: SET_USER_JWTTOKEN, token})\r\n// export const setSelfUserId = (selfUserId) => ({type: SET_SELF_USER_ID, selfUserId})\r\n\r\n// export const updateNewPostTextActionCreator = (text) =>\r\n//     ({type: UPDATE_NEW_POST_TEXT, newText: text })\r\n\r\nexport default profileReducer;","import { useState, useEffect } from 'react';\r\nexport const useHotEditing = (startFieldValue, apiFunction, validators=[], maxLength=0) => { //  additionalData=null\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [fieldValue, setFieldValue] = useState(startFieldValue);\r\n    let [isInvalid, setisInvalid] = useState(false);\r\n\r\n    let [charCount, setCharCount] = useState(`${startFieldValue.length}/${maxLength}`)\r\n\r\n    useEffect(() => {\r\n        setFieldValue(startFieldValue);\r\n    }, [startFieldValue]);\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        !isInvalid && apiFunction(fieldValue)\r\n    }\r\n    const onFieldValueChange = (e) => {\r\n       if( validators.every(valid => valid(e.currentTarget.value)===undefined)) {\r\n            setisInvalid(false)\r\n            setFieldValue(e.currentTarget.value) \r\n            chars(e.currentTarget.value.length, maxLength)\r\n       } else {\r\n        setisInvalid(true)\r\n       }\r\n    }\r\n\r\n    const chars = (currLen, maxLength) => {\r\n        setCharCount(`${currLen}/${maxLength}`)\r\n    }\r\n\r\n\r\n    return [activateEditMode, deactivateEditMode, onFieldValueChange, editMode, fieldValue, isInvalid, charCount]\r\n}","import React from 'react';\r\nimport { useHotEditing } from '../../../customHooks/hotEditing';\r\nimport { maxLength30 } from '../../../utils/validators/validators';\r\n\r\n\r\n// if i want field level validation better i have to use redux-form than localState (hooks)\r\nconst ProfileStatusWithHooks = (props) => {\r\n    const [activateEditMode, deactivateEditMode, onStatusChange, editMode, status, isInvalid, charCount] = useHotEditing(props.status, props.updateStatus, [maxLength30], 30)\r\n\r\n    return (\r\n        <div className=''>\r\n            {!props.ENSM ?\r\n                <div>\r\n                    {!editMode &&\r\n                        <div>\r\n                            <span onDoubleClick={activateEditMode}>Status: {props.status || \"-------\"}</span>\r\n                        </div>\r\n                    }\r\n                    {editMode &&\r\n                        <div>\r\n                            <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\r\n                                value={status} />\r\n                        </div>\r\n                    }\r\n                </div>\r\n                :\r\n                <div>\r\n                    <div>\r\n                        <span>Status: {props.status || \"-------\"}</span>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;","// import React from 'react';\r\n// import s from './ProfileInfo.module.css';\r\n// import Preloader from '../../common/Preloader/Preloader';\r\n\r\n// const ProfileInfo = (props) => {\r\n//     if (!props.profile) {\r\n//         return <Preloader />\r\n//     }\r\n//     return (\r\n//         <div className={s.profile_info}>\r\n//             <div className={s.landi_block}>\r\n//                 <img\r\n//                     src='https://images.pexels.com/photos/248797/pexels-photo-248797.jpeg?auto=compress&cs=tinysrgb&h=350'/>\r\n//             </div>\r\n//             <div className={s.descriptionBlock}>\r\n//                 <div className={s.ava_block}>\r\n//                     <img src={props.profile.photos.large} alt={`PHOTO OF ${props.profile.name}`}/>\r\n//                 </div>\r\n//                 <div className={s.username}>{props.profile.name}</div>\r\n//                 <div className={s.userinfo}>BIO: Date of Birth: 19 Jan 1997</div>\r\n//             </div>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// export default ProfileInfo;\r\n\r\n\r\nimport React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst ProfileInfo = ({ profile, updateStatus, updatePhoto, ENSM }) => {\r\n\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n    console.log(profile.photos.large)\r\n    return (\r\n        <div className={s.profile_info}>\r\n            <div className={s.landi_block}>\r\n                <img\r\n                    src='https://images.pexels.com/photos/248797/pexels-photo-248797.jpeg?auto=compress&cs=tinysrgb&h=350' />\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <div className={s.ava_block}>\r\n                    <img src={profile.photos.large} alt='ProfilePhoto' />\r\n                </div>\r\n                <div className={s.username}>USERNAME: {profile.name}</div>\r\n                <div className={s.userinfo}>\r\n                    <div>\r\n                        BIO: Date of Birth: 19 Jan 1997\r\n                    </div>\r\n                    <ProfileStatusWithHooks status={profile.status} updateStatus={updateStatus} ENSM={ENSM}/>\r\n                    img url: <a target=\"_blank\" href={profile.photos.large}>Get Photo</a>\r\n                </div>\r\n\r\n                {/* <ProfileStatusWithHooks status={profile.status} updateStatus = {updateStatus}/>\r\n                <ProfilePhotos photos={profile.photos} updatePhoto = {updatePhoto}/> */}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n  return (\r\n    <div className={s.item}>\r\n      <img src='https://movies4maniacs.liberty.me/wp-content/uploads/sites/1218/2015/09/avatarsucks.jpg' />\r\n        { props.message }\r\n          <div>\r\n        <span>like</span> { props.likesCount }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport { reduxForm } from 'redux-form';\r\nimport { requiredField, maxLength30 } from '../../../utils/validators/validators';\r\nimport { createField, TextArea } from '../../common/FormsControls/FormsControls';\r\nimport {addPost} from \"../../../redux/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst AddNewPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}> {/* + к этому контейнерная компонента  вызывает props.onSubmit*/}\r\n            <div className=''>\r\n                {createField('Write your post', \"newPostText\", TextArea, [requiredField, maxLength30])}\r\n            </div>\r\n            <div className=''>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n// a unique name for the form\r\nconst AddNewPostFormRedux = reduxForm({ form: 'ProfileAddNewPostForm' })(AddNewPostForm)\r\n\r\nconst MyPosts = (props) => {\r\n\r\n    const onAddPost = (formData) => {\r\n        // console.log(formData);\r\n        props.addPost(formData.newPostText);\r\n    }\r\n\r\n    let postsElements =\r\n        props.posts.map(p => <Post message={p.message} likesCount={p.likesCount} />);\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <div className={s.myPostsHeader}>My posts</div>\r\n            <div className={s.createPost}>\r\n                <AddNewPostFormRedux onSubmit={onAddPost} />\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {addPost})(MyPosts);\r\n\r\n\r\n// import React from 'react';\r\n// import s from './MyPosts.module.css';\r\n// import Post from './Post/Post';\r\n\r\n\r\n// const MyPosts = (props) => {\r\n//     let postsElements =\r\n//         props.posts.map( p => <Post message={p.message} likesCount={p.likesCount}/>);\r\n\r\n//     let newPostElement = React.createRef();\r\n\r\n//     let onAddPost = () => {\r\n//         props.addPost();\r\n//     }\r\n\r\n//     let onPostChange = () => {\r\n//         let text = newPostElement.current.value;\r\n//         props.updateNewPostText(text);\r\n//         // console.log(text);\r\n//     }\r\n\r\n//     return (\r\n//         <div className={s.postsBlock}>\r\n//             <div className={s.myPostsHeader}>My posts</div>\r\n//             <div className={s.createPost}>\r\n//                 <div>\r\n//                     <textarea ref={newPostElement} value={props.newPostText} onChange={onPostChange}/>\r\n//                 </div>\r\n//                 <div>\r\n//                     <button onClick={onAddPost}>Add post</button>\r\n//                 </div>\r\n//             </div>\r\n//             <div className={s.posts}>\r\n//                 { postsElements }\r\n//             </div>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// export default MyPosts;","import React, { useState, useEffect } from 'react';\r\nimport { reduxForm } from 'redux-form';\r\nimport { Input, TextArea, createField } from '../common/FormsControls/FormsControls';\r\nimport { maxLength30, maxLength50, maxLength200 } from '../../utils/validators/validators';\r\nimport { connect } from 'react-redux';\r\nimport { addPost, deletePost, getUserProfile, updateUserProfile, deleteUserProfile, updateStatus, updatePhoto} from '../../redux/profile-reducer';\r\nimport { withRouter, Redirect, NavLink } from 'react-router-dom';\r\nimport styles from '../common/FormsControls/FormsControls.module.css'\r\n\r\nimport s from './Profile.module.css';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\n\r\nimport { compose } from 'redux';\r\nimport withAuthRedirect from '../../hoc/WithAuthRedirect';\r\nimport MyPosts from './MyPosts/MyPosts';\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport { useForbidUnsafeMethods } from '../../customHooks/reduceUnsafeMethods';\r\n\r\nconst ProfileContainer = (props) => {\r\n\r\n    const [exchangeNotSafeMethods, setExchangeNotSafeMethods, shown, setShown, reduceMethods] = useForbidUnsafeMethods()\r\n\r\n    useEffect(() => { \r\n        const fetchData = async() => {\r\n        // debugger\r\n        let userId = props.match.params.userId;\r\n        if (!userId) {\r\n            userId = props.userId; // getting from withAuthRedirect\r\n            if (!userId) {\r\n                // return <Redirect to='/login'/>\r\n                props.history.push('/login')\r\n            }\r\n            exchangeNotSafeMethods && setExchangeNotSafeMethods(false)\r\n        }\r\n        else {\r\n            if (props.userId !== parseInt(userId)) {\r\n                // нельзя изменять (ибо не наша страница)\r\n                !exchangeNotSafeMethods && setExchangeNotSafeMethods(true)\r\n            } else {\r\n                exchangeNotSafeMethods && setExchangeNotSafeMethods(false)\r\n            }\r\n        }\r\n        \r\n        await props.getUserProfile(userId);\r\n        // debugger\r\n        setShown(true)\r\n        }\r\n        fetchData();\r\n    }, [props.match.params.userId])\r\n    \r\n\r\n    if(!shown) return <Preloader/>\r\n    return (\r\n        // {this.props.tokenError) ? <Login/>}\r\n        <div className={s.profile_wrapper}>\r\n            <ProfileInfo profile={props.profile} updateStatus={reduceMethods(props.updateStatus)} updatePhoto={reduceMethods(props.updatePhoto)} ENSM={exchangeNotSafeMethods}/>\r\n            {!exchangeNotSafeMethods && <div className=''><MyPosts/> <NavLink to={'/profile_update'}>Update My Profile</NavLink><button onClick={props.deleteUserProfile}>Delete My Profile</button> </div> }\r\n            \r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n// status is already in profile.status => so we dont need to store it out profile instance in state\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    userId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,// for WithAuthRedirect\r\n});\r\nexport default compose(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, {getUserProfile, updateStatus, updatePhoto, deleteUserProfile, updateUserProfile}), // getPhoto == \r\n    withRouter\r\n)(ProfileContainer)\r\n","import { useState } from 'react';\r\nexport const useForbidUnsafeMethods = () => {\r\n    const [exchangeNotSafeMethods, setExchangeNotSafeMethods] = useState(false)\r\n    const [shown, setShown] = useState(false)\r\n\r\n    const reduceMethods = (method, isReduced=null) => (isReduced!==null ? !isReduced : exchangeNotSafeMethods) ? ()=>{} : method\r\n\r\n    return [exchangeNotSafeMethods, setExchangeNotSafeMethods, shown, setShown, reduceMethods]\r\n}","import React from 'react';\r\nimport { reduxForm } from 'redux-form';\r\nimport { Input, createField } from '../common/FormsControls/FormsControls';\r\nimport { requiredField } from '../../utils/validators/validators';\r\nimport { connect } from 'react-redux';\r\nimport { login } from '../../redux/auth-reducer';\r\nimport { Redirect } from 'react-router-dom';\r\nimport styles from '../common/FormsControls/FormsControls.module.css'\r\n\r\n// can show the summary error\r\n// form-level validation\r\nconst LoginForm = props => {\r\n    const { handleSubmit, pristine, reset, submitting, error } = props\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField('Login', \"login\", Input, [requiredField])}\r\n            {createField('Password', \"password\", Input, [requiredField], {type: \"password\"})}\r\n            {\r\n            error && \r\n            <div className={styles.formSummaryError}>\r\n                {error}\r\n            </div>\r\n            }\r\n            <div className=''>\r\n                <button type='submit' disabled={pristine || submitting} >Login</button>\r\n            </div>\r\n            <div className=''>\r\n                <button type='button' disabled={pristine || submitting} onClick={reset}>Clear Values</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({form:'login'})(LoginForm)\r\n\r\n\r\nconst Login = (props) => {\r\n    // debugger\r\n    const onSubmit = (formData) => {\r\n        props.login(formData.login, formData.password)\r\n    }\r\n    if(props.isAuth) return (<Redirect to='/profile'/>)\r\n\r\n    return (<>\r\n        <div className=''>\r\n            <h1>LOGIN</h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n        </>)\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, {login})(Login);","import React, { useEffect, useState } from 'react';\r\nimport { reduxForm } from 'redux-form';\r\nimport { Input, TextArea, createField } from '../../common/FormsControls/FormsControls';\r\nimport { maxLength30, maxLength50, maxLength200 } from '../../../utils/validators/validators';\r\nimport { connect } from 'react-redux';\r\nimport { getUserProfile, updateUserProfile } from '../../../redux/profile-reducer';\r\nimport { Redirect, withRouter } from 'react-router-dom';\r\nimport styles from '../../common/FormsControls/FormsControls.module.css'\r\nimport withAuthRedirect from '../../../hoc/WithAuthRedirect';\r\nimport { compose } from 'redux';\r\nimport backupQuotes from '../../common/utils/backupQuotes';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\n\r\nconst UpdateProfileForm = props => {\r\n    const [lFAJ, setLFAJ] = useState(props.profile.lookingForAJob)\r\n    const toggleLFAJ = () => lFAJ ? setLFAJ(false) : setLFAJ(true)\r\n\r\n    // если даже тупо просто дотронемся до любого из полей - то можна будет отправить на сервак как якобы измененное значение ( хотя его и не изменяли )\r\n    const { handleSubmit, pristine, reset, submitting, error, profile } = props\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <label htmlFor=\"\">Name</label>\r\n            {createField(profile.name, 'name', Input, [maxLength30], {defaultValue: profile.name})}\r\n            <label htmlFor=\"\">Status</label>\r\n            {createField(profile.status, 'status', TextArea, [maxLength200], {defaultValue: profile.status})}\r\n            {/* photos */}\r\n            <h3>Photos</h3>\r\n            <h4>Large</h4>\r\n            {createField(profile.photos.large, 'photos_large', Input, null, {defaultValue: profile.photos.large})} {/*here we just write urls to ours photos -> should be subs to uploading blobs or files*/}\r\n            <label htmlFor=\"\">Small</label>\r\n            {createField(profile.photos.small, 'photos_small', Input, null, {defaultValue: profile.photos.small})}\r\n            <label htmlFor=\"\">Are you looking for A job?</label>\r\n            {createField(profile.lookingForAJob , 'lookingForAJob', Input, null, {type: \"checkbox\", checked: lFAJ, onClick: toggleLFAJ })} {/* true-false*/}\r\n            <label htmlFor=\"\">Make a small description for a job you are looking for</label>\r\n            {createField(profile.lookingForAJobDescription, 'lookingForAJobDescription', TextArea, [maxLength200], {defaultValue: profile.lookingForAJobDescription})}\r\n            <label htmlFor=\"\">Fullname</label>\r\n            {createField(profile.fullname, 'fullname', TextArea, [maxLength200], {defaultValue: profile.fullname})}\r\n            {/* contacts */}\r\n            <h3 >Contacts</h3>\r\n            <h4>github</h4>\r\n            {createField(profile.contacts.github, 'contacts_github', Input, [maxLength50], {defaultValue: profile.contacts.github})}\r\n            {createField('vk', 'contacts_vk', Input, [maxLength50], {defaultValue: profile.contacts.vk})}\r\n            {createField('facebook', 'contacts_facebook', Input, [maxLength50], {defaultValue: profile.contacts.facebook})}\r\n            {createField('instagram', 'contacts_instagram', Input, [maxLength50], {defaultValue: profile.contacts.instagram})}\r\n            {createField('twitter', 'contacts_twitter', Input, [maxLength50], {defaultValue: profile.contacts.twitter})}\r\n            {createField('website', 'contacts_website', Input, [maxLength50], {defaultValue: profile.contacts.website})}\r\n            {createField('youtube', 'contacts_youtube', Input, [maxLength50], {defaultValue: profile.contacts.youtube})}\r\n            {createField('mainLink', 'contacts_mainLink', Input, [maxLength50], {defaultValue: profile.contacts.mainLink})}\r\n\r\n            {\r\n            error && \r\n            <div className={styles.formSummaryError}>\r\n                {error}\r\n            </div>\r\n            }\r\n\r\n            <div className=''>\r\n                <button type='submit' disabled={pristine || submitting} >Update</button>\r\n            </div>\r\n            <div className=''>\r\n                <button type='button' disabled={pristine || submitting} onClick={reset}>Clear Values</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n// if only for the first render i would use  {form: ... , initialValues: {}}\r\nconst UpdateProfileReduxForm = reduxForm({form: 'updateProfile'})(UpdateProfileForm)\r\n\r\nconst UpdateProfile = props => {\r\n\r\n    useEffect(()=>{props.getUserProfile(props.userId)}, []) //  если изменяется профайл - мы делаем эффект по получению профала из АПИ props.profile\r\n    \r\n    let [profileRedirect, setProfileRedirect] = useState(false);\r\n    // те из полей полученных из формы \r\n    // которые не равны полям из пропсов добавляем в список и отправляем \r\n    // ( чтобы на апи изменялось только соответствующее знаение а не все \r\n    //     (будет удобно, когда будем загружать изображения и файлы  а не ссылки))\r\n    let addProfleFilledProperty = (obj, key, prop) => { \r\n        let subObjects = ['contacts', 'photos']\r\n        if(subObjects.every(start => !key.startsWith(start))){\r\n            obj[key] = prop\r\n        } \r\n        else {\r\n            subObjects.map(start => \r\n                {if(key.startsWith(start)){\r\n                    obj[start] = {}\r\n                    obj[start][key.split('_')[1]] = prop\r\n                    }\r\n                    return true\r\n                })\r\n            }\r\n    } \r\n    const onSubmit = (formData) => {\r\n        // console.log(profileRedirect)\r\n        let profileData = {}\r\n        for(let profProp in formData){\r\n            addProfleFilledProperty(profileData, profProp, formData[profProp])\r\n        }\r\n        Object.keys(profileData).map(data => {\r\n            if(['contacts', 'photos'].includes(data)){\r\n                profileData = {...profileData, [data]: backupQuotes(Object.keys(props.profile[data])\r\n                    .reduce((res, key) => (res[key] = (key in profileData[data] ? profileData[data][key]: props.profile[data][key]), res ), {}))}\r\n            }\r\n        })\r\n        props.updateUserProfile(profileData)\r\n        setProfileRedirect(true)\r\n    }\r\n    // then redirect to profile page (add to store isProfileUpdated: true) // or right after submit redirect \r\n\r\n    \r\n    if (profileRedirect) return <Redirect to='/profile' />\r\n    if (!props.profile) return <Preloader/>\r\n    return (\r\n        \r\n        <div className=''>\r\n            <h2 className=''>Profile Data Changing</h2>\r\n            <UpdateProfileReduxForm onSubmit={onSubmit} profile={props.profile}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    userId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,// for WithAuthRedirect\r\n});\r\nexport default compose(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, {updateUserProfile, getUserProfile}),  // getUserProfile\r\n    // withRouter\r\n)(UpdateProfile)\r\n","/* eslint-disable jsx-a11y/alt-text */\r\nimport React, { useState } from 'react';\r\nimport { useHotEditing } from '../../../customHooks/hotEditing';\r\nimport styleMessages from './Message.module.css';\r\nimport { maxLength1000 } from '../../../utils/validators/validators';\r\n\r\nimport { saveAs } from 'file-saver';\r\n\r\n\r\nconst EditMessageActive = ({isInvalid, onMBChange, deactivateEditMode, editedMessage, charCount}) => {\r\n    return (<div className={styleMessages.editMessage}>\r\n        <textarea className={isInvalid ? `${styleMessages.editField} ${styleMessages.error}`: `${styleMessages.editField}`} onChange={onMBChange} autoFocus={true} onBlur={deactivateEditMode}\r\n            value={editedMessage} />\r\n        {\r\n            isInvalid && <div className={styleMessages.errorField}>Invalid Data</div>\r\n        }\r\n        <div className={styleMessages.countChars}>{charCount}</div>\r\n    </div>)\r\n}\r\n\r\nconst EditMessageInactive = ({fileId, activateEditMode, messageBody, fileImageURL, fileURL, loadFile, ENSM}) => { \r\n    if (fileId){\r\n        return ( <div className={styleMessages.messageBody} onDoubleClick={!ENSM? activateEditMode: undefined}> {messageBody} \r\n            <div className={`${styleMessages.messageFile} ${fileImageURL===null ? styleMessages.fileImageDeactivate : styleMessages.fileImageActivate}`}>\r\n                        <span>+ fileId: {fileId}</span>\r\n                        <button onClick={()=>loadFile(fileId)}>GetFile</button> \r\n                        <img src={fileImageURL}/>\r\n                        {fileURL &&  <a href={fileURL}>fileURL File Here</a>}\r\n                </div>\r\n            </div>)\r\n    } else {\r\n        return (<div className={styleMessages.messageBody} onDoubleClick={!ENSM? activateEditMode: undefined}>{messageBody}</div>)\r\n    }\r\n    \r\n}\r\n\r\nfunction urltoFile(url, filename, mimeType){\r\n    return (fetch(url)\r\n        .then(res =>( console.log(res), res) )\r\n        .then(function(res){return res.arrayBuffer();})\r\n        .then(function(buf){let newFile = new File([buf], filename,{type:mimeType});;  console.log(newFile); return newFile; })\r\n    );\r\n}\r\n\r\n\r\nexport const EditMessage = ({messageBody, editMessage, ENSM, fileId, getFile}) => {\r\n    const [activateEditMode, deactivateEditMode, onMBChange, editMode, editedMessage, isInvalid, charCount] = useHotEditing(messageBody, editMessage, [maxLength1000], 1000) \r\n\r\n    const [fileImageURL, setFII] = useState(null)\r\n    const [fileURL, setFU] = useState(null)\r\n    const loadFile = async(fileId) => { // click -> then it will loaded to explorer or added as src to img\r\n        let file = await getFile(fileId)\r\n        if(file.name){\r\n\r\n            console.log(file)\r\n        \r\n            // if(!file.isImage){\r\n            //     urltoFile(file.file, file.name, file.format)\r\n            //     .then(function(file){ \r\n            //         console.log(file);\r\n            //             saveAs(file); });\r\n            // } else {\r\n\r\n\r\n            if(!file.isImage){\r\n                urltoFile(file.file, file.name, file.format)\r\n                .then(function(file){ \r\n                    let reader = new FileReader();\r\n                    reader.onload = function(upload) {\r\n                        setFU(upload.target.result)\r\n                        console.log(upload);\r\n                        console.log(upload.target.result);\r\n                        console.log(\"File Uploaded\");\r\n                    }\r\n                    reader.readAsDataURL(file);})\r\n            } else {\r\n\r\n\r\n                urltoFile(file.file, file.name, file.format)\r\n                .then(function(file){ \r\n                    let reader = new FileReader();\r\n                    reader.onload = function(upload) {\r\n                        setFII(upload.target.result)\r\n                        console.log(upload);\r\n                        console.log(upload.target.result);\r\n                        console.log(\"Imgae Uploaded\");\r\n                    }\r\n                    reader.readAsDataURL(file);})\r\n            }\r\n\r\n        } else {\r\n            console.log('error in getting file from api')\r\n        }\r\n        \r\n    }\r\n    return ( \r\n            <>\r\n                {!editMode && \r\n                <EditMessageInactive fileId={fileId} activateEditMode={activateEditMode} messageBody={messageBody} fileImageURL={fileImageURL} fileURL={fileURL} loadFile={loadFile.bind(this)} ENSM={ENSM}/>\r\n                }\r\n                {editMode &&\r\n                <EditMessageActive isInvalid={isInvalid} onMBChange={onMBChange} deactivateEditMode={deactivateEditMode} editedMessage={editedMessage} charCount={charCount} />\r\n                }\r\n            </>  \r\n    )\r\n}\r\n","import React, {useRef, useImperativeHandle, forwardRef } from 'react';\r\nimport styleMessages from './Message.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { convertTime } from '../../common/utils/convertTime';\r\nimport { EditMessage } from './EditMessage';\r\n\r\n\r\n// add readed and local and functions to operate with msgs\r\nconst Message = (props, ref) => {\r\n    const inputRef = useRef();\r\n    useImperativeHandle(ref, (node) => {\r\n    //   focus: () => {\r\n    //     inputRef.current.focus();\r\n    //   }\r\n        // console.log('useImperativeHandle')\r\n        // console.log(node)\r\n        // console.log(inputRef.current)\r\n        return inputRef.current\r\n    });\r\n    \r\n    const { message, editMessageRequest, deleteMessageRequest, ENSM, chatTypeId, chatId, getFile, downloadFile} = props\r\n    // console.log( message.fileId)\r\n    const editMessage = (chatTypeId, chatId,  message) => (messageBody) => editMessageRequest(chatTypeId, chatId, message.id, messageBody)\r\n    \r\n    const onDeleteMsg = () => {\r\n        deleteMessageRequest(chatTypeId, chatId, message.id)\r\n    }\r\n\r\n    \r\n    // just add /br for unread msgs  \r\n    return <div className={`${styleMessages.message}`} ref={inputRef}>\r\n        <div className={styleMessages.messageAuthorName}>\r\n            <NavLink to={`/profile/${message.authorId}`}>{message.authorName}</NavLink>\r\n        </div>\r\n        <EditMessage ENSM={ENSM} editMessage={editMessage(chatTypeId, chatId, message)} messageBody={message.body} getFile={getFile} downloadFile={downloadFile} fileId={message.fileId}/>\r\n        <div className={styleMessages.messageSendedEdited}>\r\n            <div className={styleMessages.messageSended}>sended: {convertTime(message.sended)}</div>\r\n            <div className={styleMessages.messageEdited}>edited: {convertTime(message.edited)}</div>\r\n        </div>\r\n        <div className={styleMessages.deleteMessage}>{!ENSM && <a onClick={onDeleteMsg}>Delete Message</a>}</div>\r\n        </div>\r\n}\r\n\r\nexport default forwardRef(Message);\r\n","import React, {useState}  from 'react';\r\nimport styles from '../../common/FormsControls/FormsControls.module.css'\r\nimport { createField, TextArea, FileInput, Input } from '../../common/FormsControls/FormsControls';\r\nimport { maxLength1000 } from '../../../utils/validators/validators';\r\nimport { reduxForm } from 'redux-form';\r\nimport { compose } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport withAuthRedirect from '../../../hoc/WithAuthRedirect';\r\nimport { createMessageRequest  } from '../../../redux/chats-reducer';\r\n\r\nconst CreateMessageForm = props => {\r\n    const { handleSubmit, pristine, reset, submitting, error } = props\r\n\r\n\r\n    // const [selectedFiles, setSelectedFiles] = useState(undefined);\r\n    // const selectFile = (event) => {\r\n    //   setSelectedFiles(event.target.files);\r\n    // };\r\n\r\n\r\n    // const [file, setFile] = useState({\r\n    //     selectedFiles: undefined,\r\n    //     currentFile: undefined,\r\n    //     progress: 0,\r\n    //     message: \"\",\r\n  \r\n    //     fileInfos: [],\r\n    //   })\r\n\r\n    // const selectFile = (ev) => {\r\n    //     setFile({\r\n    //         selectedFiles: ev.target.files,\r\n    //     });\r\n    // }\r\n\r\n    // TIP there is problems\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField('Write a message...', 'messageBody', TextArea, [maxLength1000])}\r\n            {createField('Upload a file...', 'uploadedFile', FileInput, null, {type: \"file\"})} \r\n            {\r\n            error && \r\n            <div className={styles.formSummaryError}>\r\n                {error}\r\n            </div>\r\n            }\r\n            <div className=''>\r\n                <button type='submit' disabled={pristine || submitting} >Send</button>\r\n            </div>\r\n            <div className=''>\r\n                <button type='button' disabled={pristine || submitting} onClick={reset}>Clear</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst msgCreationStyleForm = {\r\n    color: 'green'\r\n}\r\n\r\nconst CreateMessageReduxForm = reduxForm({form: 'CreateMessage'})(CreateMessageForm)\r\n\r\nconst CreateMessage = (props) => {\r\n    const onSubmit = (formData) => {\r\n        formData[\"uploadedFile\"] ?\r\n            props.createMessageRequest(props.chatTypeId, props.chatId, formData[\"messageBody\"], formData[\"uploadedFile\"]) :\r\n            props.createMessageRequest(props.chatTypeId, props.chatId, formData[\"messageBody\"])\r\n    }\r\n    return (\r\n        <div className=''>\r\n            <div style={msgCreationStyleForm}>Message:</div>\r\n            <CreateMessageReduxForm onSubmit={onSubmit}/>   \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default compose(\r\n    withAuthRedirect,\r\n    connect(null, {createMessageRequest}),\r\n)(CreateMessage);\r\n","\r\n/* eslint-disable jsx-a11y/alt-text */\r\n/* eslint-disable no-sequences */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { useEffect, useState, useRef, useCallback, useReducer } from 'react';\r\nimport { compose } from 'redux';\r\nimport withAuthRedirect from '../../../hoc/WithAuthRedirect';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { getMessages, editMessageRequest, deleteMessageRequest, getCurrentChatData,\r\n        clearChatMyLocal, clearChatMyGlobal, clearChatAllLocal, clearChatAllGlobal,\r\n        toogleMemberStatus, removeMemberMsgs, removeOneMemberMsg, removeMember,\r\n        setChatPhotoRequest, addMember, renameChatRequest, \r\n        getFile, setRefreshMessageCreating, \r\n        // setRefreshAfterDM,\r\n\r\n        // setOldMsgsDonwload, \r\n        // fetchMoreOldMsgs\r\n     } from '../../../redux/chats-reducer';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport { selectChatMessages, selectCIPS, selectCTIPS, selectCurrentChat, selectFocusedWindowAddUserForChat, selectFocusedWindowMembersForChat, selectFocusedWindowMemberOperationsForChat } from '../../../redux/chats-selector';\r\nimport Message from '../Message/Message';\r\n\r\n\r\nimport styleMessages from '../Message/Message.module.css';\r\nimport styleChats from '../Chats.module.css';\r\nimport CreateMessage from '../Message/CreateMessage'; \r\nimport { ChangeChatPhoto, RenameChat, Member, Members, SelectMemberToChat } from './ChatItem';\r\nimport { addFocusedWindow, clearCurrentFocusedWindow } from '../../../redux/app-reducer';\r\n\r\n\r\n\r\n\r\n\r\nconst getMessageTagWithRef = (data, refCondition, withNewMsgsTag=false, NMTRefCondition=null) => {\r\n    if(!withNewMsgsTag) return (<Message message={data.msg} key={data.msg.id}\r\n                                ref={refCondition} // OMD_PSR_CBCB(msg.id)\r\n                                deleteMessageRequest={data.deleteMessageRequest} \r\n                                editMessageRequest={data.editMessageRequest} ENSM={!data.msg.local}\r\n                                chatTypeId={data._chatTypeId} chatId={data._chatId} getFile={data.getFile}/>)\r\n    \r\n    return [\r\n        <div className={`${styleMessages.newMsgsStartTag}`} \r\n        ref={NMTRefCondition}>----------UNREAD MESSAGES----------</div>,\r\n        // rasCBCB1()\r\n        <Message message={data.msg} key={data.msg.id} \r\n        ref={refCondition} // OMD_PSR_CBCB(msg.id)\r\n                deleteMessageRequest={data.deleteMessageRequest} \r\n                editMessageRequest={data.editMessageRequest} ENSM={!data.msg.local}\r\n                chatTypeId={data._chatTypeId} chatId={data._chatId} getFile={data.getFile}/>\r\n        ]\r\n}\r\n\r\n// setRefreshAfterDM /\r\n\r\n\r\n\r\n\r\n// ......  numOfDeletedMsgs - счетчик удаленных сообщений чтоб послать в рефрещ\r\nconst ChatDetail = ({getCurrentChatData, getMessages, IsFetchingMsgs,  \r\n    setRefreshMessageCreating, \r\n    // setRefreshAfterDM, // functions\r\n    chatTypeId:_chatTypeId, chatId:_chatId, readFromIndexNext:_readFromIndexNext, readFromIndex:_readFromIndex, // state\r\n    windowScrollOnMsgCreate, isMessageCreating, isRefreshedAfterMC, \r\n    numOfDeletedMsgs,\r\n    ...props}) => {  // other props\r\n\r\n    const [oldMsgsDonwload, setOldMsgsDonwload] = useState(false, 'oldMsgsDonwload'); \r\n    const [preFetch, setPreFetch] = useState(false, 'preFetch');  /// +\r\n    const [selectedMember, setSelectedMember] = useState(null, 'selectedMember') /// using in child functions (so dont check it now)   -\r\n    const [refToTopAtStart, setRTTAS] = useState(true,  'refToTopAtStart')  ///\r\n    const [positioningScrollRefScroll, setPSRS] = useState(false, 'positioningScrollRefScroll') \r\n    \r\n    // old message download positional scrol ref\r\n    const refOMDPSR = useRef(null) // this ref node always had loadOldMsgsDiv part of oclass ( we can write here not only node, but object {'node':node, classPart:'loadOldMsgsDiv'})\r\n    const refAtStart = useRef(null) // ref -> refAtStart\r\n    const refToObserve = useRef(null) // from refAtStartCB and \r\n\r\n    const [refreshIsRunning, setRIR] = useState(false)\r\n\r\n\r\n    // const [loadingOnScroll, setLoadingOnScroll] = useState(true) // _readFromIndex !=== _readFromIndexNext\r\n\r\n    // const getMessagesCB = useCallback( async (RFI) => (await getMessages(_chatTypeId, _chatId, RFI, _firstOfSetOfMsgsId )),\r\n    //                                     [ _chatTypeId, _chatId, _firstOfSetOfMsgsId, getMessages ] ) // _prop - mean its from props descruct\r\n\r\n\r\n    // const getRefreshMessagesCB = useCallback( async () => (await getMessagesCB( _readFromIndex )),  [_readFromIndex, getMessagesCB ] ) // _prop - mean its from props descruct\r\n\r\n    // const getOLDMessagesCB = useCallback( async () =>   (await getMessagesCB( _readFromIndexNext )), [ _readFromIndexNext, getMessagesCB ] ) // _prop - mean its from props descruct\r\n\r\n\r\n\r\n    const refLastMsg = useRef(null)\r\n    \r\n    // какой эффект первым напишут - тот первым и исполнится - все топ)))\r\n    // const isUltimateCallbackProcced = useRef(false)\r\n    // isUltimateCallbackProcced.current = false // to set to the aflse each render\r\n\r\n    useEffect(()=>{\r\n        if(preFetch){\r\n            ULTIMATE_CALLBACK( refToTopAtStart ? 'start' : 'notStart',\r\n                                refToTopAtStart ? refAtStart.current : refOMDPSR.current, \r\n                                refToTopAtStart ?  props.currentChat.firstNewMsgID === null : positioningScrollRefScroll && !oldMsgsDonwload,\r\n                                refToObserve.current)\r\n        }\r\n        // isUltimateCallbackProcced.current = true\r\n        // return () => isUltimateCallbackProcced.current === true\r\n    }) // [preFetch, props.currentChat.firstNewMsgID, ]\r\n\r\n    // const wSOMC = useRef(windowScrollOnMsgCreate) // will be last value of prop ( e.i. if we cleanup it data we will check newest data from props to not run it action more then should)\r\n    useEffect(() => {\r\n        // еси не успел исполнится эффект а юзер закрыл страницу - зануляем значение windowScrollOnMsgCreate в редаксе // но по идее этот то пропс будет слепком из прошлого рендера ( потому и будет тру - тоесть иногда мы мб будем зря занулять)\r\n        if(isRefreshedAfterMC){\r\n            if(refLastMsg.current){\r\n                refLastMsg.current.scrollIntoView()\r\n            } else {\r\n                console.log('some wierd error in ref creating for last msg after creation')\r\n            }\r\n            isRefreshedAfterMC && setRefreshMessageCreating(false)\r\n            // isRefreshedAfterDM && setRefreshAfterDM(false)\r\n        }\r\n        // return () => {if(windowScrollOnMsgCreate === true){shouldWindowScrollDown(false)}}\r\n    },[setRefreshMessageCreating, isRefreshedAfterMC]) // setRefreshAfterDM\r\n\r\n    useEffect(()=>{\r\n\r\n        let node = null;\r\n\r\n        const thresholdArray = steps => Array(steps + 1)\r\n            .fill(0)\r\n            .map((_, index) => index / steps || 0)\r\n\r\n        const handleIntersect = (entries, observer) => { // its async??? // no its callback!\r\n            entries.forEach(entry => {\r\n                const isIntersecting = entry.isIntersecting \r\n                console.log('only after scroll calling')\r\n                if(isIntersecting){ \r\n                    // debugger\r\n                    console.log('intersetcion of target(should be true) ')\r\n                    console.log(\"TOP DIV VIEWED: \" + entry.target.innerText) // refToObserve.current.innerText\r\n                    // entry.target.className = entry.target.className.replace(/[^\\s]*loadOldMsgsDiv[^\\s]*/g, ''); // change whole className but regex will take only a part of className (approp class)\r\n                    observer.unobserve(entry.target)\r\n                    \r\n                    setOldMsgsDonwload(true) // toggle proccess for loading old msgs\r\n                }\r\n            })\r\n        }\r\n\r\n        const observer = new IntersectionObserver(handleIntersect, {threshold: thresholdArray(2)})\r\n\r\n\r\n        \r\n        if(refToObserve.current && preFetch && ((!positioningScrollRefScroll && !oldMsgsDonwload) || (refToTopAtStart))){ \r\n            node = refToObserve.current\r\n            observer.observe(node); // its event.target\r\n        }\r\n\r\n\r\n        return () => node !==null && observer.unobserve(node);\r\n    }, [positioningScrollRefScroll, oldMsgsDonwload, refToTopAtStart, preFetch])// it will call every render and it okay//,[setOldMsgsDonwload, preFetch, refToTopAtStart]) \r\n\r\n\r\n\r\n    const ULTIMATE_CALLBACK = (nodeToScrollType, nodeToScroll, conditionNTS, nodeToObserve)=> {\r\n        if(nodeToScroll ==null) return \r\n            if(nodeToScrollType==='start'){\r\n                // debugger\r\n                if(conditionNTS){\r\n                    nodeToScroll.scrollTop = nodeToScroll.scrollHeight  \r\n                } else {\r\n                    nodeToScroll.scrollIntoView()\r\n                } \r\n                // refToObserveCB()\r\n                setRTTAS(false)\r\n            } else {\r\n                if(conditionNTS){\r\n                    debugger\r\n                    nodeToScroll.scrollIntoView()\r\n                    setPSRS(false)\r\n                }\r\n            }\r\n    }\r\n\r\n\r\n    useEffect(() => { ////////////////////////////////////////////// (PF)\r\n        console.log('should run 2 times only (preFetch)') \r\n        if( !preFetch ){//&& !props.IsFetchingMsgs){ \r\n            const populatePreFetchData = async() => {\r\n                await getCurrentChatData();\r\n                setPreFetch(true);\r\n            }\r\n            populatePreFetchData();\r\n        }\r\n    }, [preFetch, getCurrentChatData])\r\n\r\n    useEffect(() => {/////////////////////////////////////////////////// (RD)\r\n            // if(preFetch) {\r\n            let sTOID = null\r\n            // console.log(\"refreshIsRunning\")\r\n            // console.log(refreshIsRunning)\r\n            if(!refreshIsRunning){\r\n            sTOID = setTimeout( async () => {\r\n                // setRIR(true)\r\n                if( !oldMsgsDonwload && preFetch && !IsFetchingMsgs && !positioningScrollRefScroll){\r\n                    // debugger\r\n                    setRIR(true)\r\n                    // let currentdate = new Date(); \r\n                    // let datetime = \"Last Sync: \" + currentdate.getDate() + \"/\"\r\n                    // + (currentdate.getMonth()+1)  + \"/\" \r\n                    // + currentdate.getFullYear() + \" @ \"  \r\n                    // + currentdate.getHours() + \":\"  \r\n                    // + currentdate.getMinutes() + \":\" \r\n                    // + currentdate.getSeconds();\r\n                    // console.log(datetime)\r\n                    await getMessages(_chatTypeId, _chatId, _readFromIndex, props.readFromIndexBefore, null, (windowScrollOnMsgCreate && !isMessageCreating), numOfDeletedMsgs )\r\n                    setRIR(false)\r\n                } \r\n            }\r\n            , 1500) }     \r\n            return () => { sTOID !== null && clearTimeout(sTOID); }; \r\n            //  но функция то мы запускаем иммидиатли(потому значения oldMsgsDonwload - текущие!!!!)\r\n        // if(!positioningScrollRefScroll && oldMsgsDonwload && !IsFetchingMsgs){ // если мы должны подгрузить старые сообщ + не грузится пока при рефреше сообщения, то запускаем асинх функцию\r\n        }, [preFetch, oldMsgsDonwload, IsFetchingMsgs, positioningScrollRefScroll,\r\n            _chatTypeId, _chatId, _readFromIndex, props.readFromIndexBefore, getMessages,\r\n            windowScrollOnMsgCreate, isMessageCreating, numOfDeletedMsgs, refreshIsRunning]) //  for what oldMsgsDonwload ???? if msgs not fetching yet ( but process of getOLDMessagesCB is started ( but async so can не успеть зарундерится))\r\n        // IsFetchingMsgs dont need (cause only 2 effects - FOM and RD -> if FOM processing (oldMsgsDonwload) => u can use RD and vise versa)\r\n\r\n\r\n    useEffect(() => { // (FOM)\r\n\r\n        if(!positioningScrollRefScroll && oldMsgsDonwload && !IsFetchingMsgs){ // если мы должны подгрузить старые сообщ + не грузится пока при рефреше сообщения, то запускаем асинх функцию\r\n            const fetchOldMsgs = async() => { \r\n                await getMessages(_chatTypeId, _chatId, _readFromIndexNext, _readFromIndex )\r\n                // setPSRS(false)\r\n                setOldMsgsDonwload(false) \r\n\r\n                // if(_readFromIndexNext === _readFromIndex){\r\n                //     setLoadingOnScroll(false) \r\n                // }\r\n            }\r\n            setPSRS(true)\r\n            debugger\r\n            fetchOldMsgs()\r\n        }\r\n        // написать отмену загрузки данных (сообщений с АПИ)\r\n        // return () => {} // после того как заканчивается эффект в котором условие исполнилось но не успело заверишся действие \r\n    }, [IsFetchingMsgs, positioningScrollRefScroll, oldMsgsDonwload, setOldMsgsDonwload, setPSRS,\r\n        _chatTypeId, _chatId, _readFromIndexNext, _readFromIndex, getMessages])\r\n  \r\n//|| props.oldMsgsDonwload\r\n    if (!preFetch){ return <Preloader />} else {\r\n        if(numOfDeletedMsgs > 0){\r\n            console.log(\"numOfDeletedMsgs\")\r\n            console.log(numOfDeletedMsgs)\r\n        }\r\n    // ----------Get Older Messages----------\r\n    let beforeMsgsDiv = (_readFromIndexNext !== _readFromIndex) ? (<div className={`${styleMessages.loadOldMsgsDiv}`} ref={refToObserve}></div>) : \r\n                                                (<div className={`${styleMessages.startChatDiv}`}>----------Chat Start----------</div>)\r\n\r\n    // но после каждого updateUnreadMsgs - props.messages[index-1].msgViewed === true - потому делаем апдейт только после  выхода из чата ( в локалстейте хранится индекс последнего сообщения прочитанного и по нему обновление идет)\r\n    \r\n    let messages = props.messages.map((msg, index) => \r\n                                        {\r\n                                            let dataToMsg = {msg:msg, getFile:props.getFile, _chatId:_chatId, _chatTypeId:_chatTypeId,\r\n                                                editMessageRequest:props.editMessageRequest, deleteMessageRequest:props.deleteMessageRequest}\r\n\r\n                                            if(props.currentChat.firstNewMsgID!==null && props.currentChat.firstNewMsgID <= msg.id && \r\n                                                (index === 0 || props.messages[index-1].id < props.currentChat.firstNewMsgID ))\r\n                                            {// return list of 2 elems\r\n                                                return getMessageTagWithRef(dataToMsg, (msg.id === props.readFromIndexBefore && positioningScrollRefScroll ? refOMDPSR : undefined),\r\n                                                true,  (props.currentChat.firstNewMsgID !== null && refToTopAtStart ? refAtStart : undefined))\r\n                                            } else {\r\n                                                if(index === props.messages.length - 1){\r\n                                                    // if message already created and we should after that scroll -> do that then discard wsomc value to false \r\n                                                    return getMessageTagWithRef(dataToMsg, (isRefreshedAfterMC  ? refLastMsg : undefined))\r\n                                                } else {\r\n                                                    return getMessageTagWithRef(dataToMsg, (msg.id === props.readFromIndexBefore && positioningScrollRefScroll ? refOMDPSR : undefined))\r\n                                                }\r\n                                            }\r\n                                            }).flat()  // if we create newMsgsStartTag additional tag\r\n    messages.unshift(beforeMsgsDiv) // add div before first msg                                           \r\n    if(messages.length < 3){ // сообщений становится ноль после удаления (иногда) - после этого надо запустить процес прогрузки старых сообщений \r\n        debugger\r\n    }\r\n    const prefetchOper = (method, chatTypeId, chatId) => (selectedMemberId)  => () => method(chatTypeId, chatId, selectedMemberId)\r\n    let memberOpers = [{method: props.toogleMemberStatus, name: 'Toogle Member'}, {method: props.removeMemberMsgs, name: 'Remove All Member Messages'}, {method: props.removeMember, name: 'Remove Member'}]\r\n    let chatUsersIds = props.currentChat.members.map(member => member.id)\r\n\r\n    \r\n    let members = _chatTypeId === 1 \r\n                    ? \r\n                    props.currentChat.members.map(member => <Member member={member} key={member.id} memberStyle={`${styleMessages.chatMember}`} \r\n                        chatMemberSettings={`${styleMessages.chatMemberSettings}`}\r\n                        setMemberOperShow={(event) => (event.stopPropagation(), props.addFocusedWindow(props.fWMOFC.id, true))}\r\n                        addFocusedWindow={props.addFocusedWindow}\r\n                        fWMOFC={props.fWMOFC}\r\n                        setSelectedMember={setSelectedMember}/>)\r\n                    :\r\n                    props.currentChat.members.map(member => <Member member={member} key={member.id}/>)\r\n\r\n                    \r\n    return (\r\n        <>\r\n        {\r\n        props.fWAUFC.data !== null  && \r\n        <div className={styleChats.addMember}>\r\n            <SelectMemberToChat addMember={props.addMember} chatTypeId={_chatTypeId} chatId={_chatId} chatUsersIds={chatUsersIds} \r\n            fWAUFC={props.fWAUFC} clearCurrentFocusedWindow={props.clearCurrentFocusedWindow} />\r\n        </div>\r\n        } \r\n        <div className={styleMessages.currentChat}>\r\n            \r\n                <Members members={members} \r\n                membersShow={props.fWMFC.data} \r\n                memberOperShow={props.fWMOFC.data} \r\n                selectedMember={selectedMember}\r\n                memberOpers={memberOpers\r\n                    .map(memberOper => ({...memberOper, \r\n                        method: prefetchOper(memberOper.method, _chatTypeId, _chatId) }))}/>\r\n \r\n            <div className={styleMessages.chatsHeader}>\r\n                <div className={styleMessages.chatsHeaderPhoto}> {props.currentChat.chatPhoto.small !== null ? <img src={props.currentChat.chatPhoto.small} /> : <div className={styleMessages.chatsHeaderPhotoAlt}>chatPhotoSmall</div>}</div>\r\n                <div className={styleMessages.chatsHeaderName}>{props.currentChat.name}</div>\r\n                <div className={styleMessages.chatsHeaderSettings}>\r\n                    Settings\r\n                    <div className={styleMessages.chatsSettings}>\r\n                    { _chatTypeId === 1 &&\r\n                        <>\r\n                            <div className={styleMessages.chatsSettingsItem}>\r\n                                {props.fWAUFC.data === null  &&\r\n                                    <a className={styleChats.getMemberList}\r\n                                        onClick={\r\n                                            (event) => (event.stopPropagation(), props.addFocusedWindow(props.fWAUFC.id, [_chatTypeId, _chatId]))\r\n                                         }\r\n                                        > \r\n                                            Add Member\r\n                                        </a>\r\n                                }\r\n                            </div>\r\n                            <div className={styleMessages.chatsSettingsItem}>\r\n                                <div className={styleMessages.chatsSettingsItemH}>Change Photo</div>\r\n                                <ChangeChatPhoto msgStyle={styleMessages.chatsSettingsItemForm} setChatPhotoRequest={props.setChatPhotoRequest} chatTypeId={_chatTypeId} chatId={_chatId} />\r\n                            </div> \r\n                            <div className={styleMessages.chatsSettingsItem}>\r\n                            <div className={styleMessages.chatsSettingsItemH}>Rename Chat</div>\r\n                                <RenameChat msgStyle={styleMessages.chatsSettingsItemForm} renameChatRequest={props.renameChatRequest} chatTypeId={_chatTypeId} chatId={_chatId}/>\r\n                            </div> \r\n                             </>\r\n                    } \r\n                        <div className={styleMessages.chatsSettingsItem}>\r\n                            <div className={styleMessages.chatsMembersHeader}>\r\n                                {\r\n                                props.fWMFC.data === null &&\r\n                                <a onClick={(event)=>(event.stopPropagation(), props.addFocusedWindow(props.fWMFC.id, true))}>\r\n                                    Chat Members\r\n                                </a>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    \r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n \r\n            {/* event or event.target TODO*/}\r\n            \r\n        <div className={styleMessages.messages} ref={\r\n            // delete this ref if refToTopAtStart is already precced before (cause we dont nedd to posit again) so use \"\"\"&& refToTopAtStart\"\"\"\r\n            // rasCBCB1(props.currentChat.firstNewMsgID , refToTopAtStart) /// ref={undefined} -> знач что наша ссыль оставила привзяку на старого рендера елемент(тег)\r\n            props.currentChat.firstNewMsgID === null && refToTopAtStart ? refAtStart : undefined }>\r\n                {messages}\r\n                {/* <h1>{refToTopAtStart + 'is it okay refToTopAtStart ??????'}</h1> */}\r\n        </div>\r\n            {/* { ULTIMATE_CALLBACK( refToTopAtStart ? 'start' : 'notStart',\r\n                            refToTopAtStart ? refAtStart.current : refOMDPSR.current, \r\n                            refToTopAtStart ?  props.currentChat.firstNewMsgID === null : positioningScrollRefScroll && !oldMsgsDonwload,\r\n                             refToObserve.current)} */}\r\n\r\n\r\n                             \r\n        {/* <h3 className={styleMessages.trash} ref={() => ULTIMATE_CALLBACK( refToTopAtStart ? 'start' : 'notStart',\r\n                            refToTopAtStart ? refAtStart.current : refOMDPSR.current, \r\n                            refToTopAtStart ?  props.currentChat.firstNewMsgID === null : positioningScrollRefScroll && !oldMsgsDonwload,\r\n                             refToObserve.current)}>Trash</h3> */}\r\n\r\n\r\n        {/* when all ref tag elems rendered call it -> to make operations over that refs */}\r\n        <div className={styleMessages.createMessageForm}><CreateMessage chatTypeId={_chatTypeId} chatId={_chatId} isAuth={props.isAuth}/></div>\r\n\r\n\r\n            \r\n        </div>\r\n        </>\r\n            )\r\n        }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state) => ({\r\n    messages: selectChatMessages(state),\r\n    isAuth: state.auth.isAuth,\r\n    chatTypeId: selectCTIPS(state),\r\n    chatId: selectCIPS(state),\r\n    currentChat: selectCurrentChat(state),\r\n\r\n    fWAUFC: selectFocusedWindowAddUserForChat(state),\r\n    fWMFC: selectFocusedWindowMembersForChat(state),\r\n    fWMOFC: selectFocusedWindowMemberOperationsForChat(state),\r\n\r\n\r\n    readFromIndexNext: state.chatsPage.readFromIndexNext,\r\n    readFromIndex: state.chatsPage.readFromIndex,\r\n    readFromIndexBefore: state.chatsPage.readFromIndexBefore,\r\n    IsFetchingMsgs: state.chatsPage.IsFetchingMsgs,\r\n\r\n    windowScrollOnMsgCreate: state.chatsPage.windowScrollOnMsgCreate,\r\n    isMessageCreating: state.chatsPage.isMessageCreating,\r\n    isRefreshedAfterMC: state.chatsPage.isRefreshedAfterMC,\r\n    numOfDeletedMsgs: state.chatsPage.numOfDeletedMsgs,\r\n})\r\n\r\nexport default compose(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, { getMessages, editMessageRequest, deleteMessageRequest,\r\n                                getCurrentChatData,\r\n                                clearChatMyLocal, clearChatMyGlobal, clearChatAllLocal, clearChatAllGlobal,\r\n                                toogleMemberStatus, removeMemberMsgs, removeOneMemberMsg, removeMember,\r\n                                setChatPhotoRequest, addMember, renameChatRequest,\r\n\r\n                                addFocusedWindow, clearCurrentFocusedWindow,\r\n\r\n                                getFile,  \r\n                                setRefreshMessageCreating,\r\n                            }),\r\n    withRouter\r\n)(ChatDetail)\r\n\r\n \r\n\r\n// pre render page effect useLayoutEffect\r\n// post render page effect useEffect","import React, { useEffect } from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header/Header';\r\nimport Navbar from './components/Navbar/Navbar';\r\n// import Profile from './components/Profile/Profile';\r\nimport { Route, withRouter  } from \"react-router-dom\";\r\nimport ChatsContainer from './components/Chats/ChatsContainer';\r\nimport UsersContainer from './components/Users/UsersContainer';\r\nimport Profile from './components/Profile/Profile';\r\nimport Login from './components/Login/Login';\r\nimport UpdateProfile from './components/Profile/UpdateDeleteProfile/UpdateProfile';\r\nimport Preloader from './components/common/Preloader/Preloader';\r\nimport { initializeApp, clearAllFocusedWindows } from './redux/app-reducer';\r\nimport { compose } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport ChatDetail from './components/Chats/ChatItem/ChatDetail';\r\n\r\n\r\nconst App = React.memo((props) => {\r\n \r\n\r\n        console.log('rerender')\r\n        console.log(props.initialized)\r\n        useEffect(() => {props.initializeApp()}, [])\r\n        if((!props.initialized)) return <Preloader/>\r\n        return (\r\n                <div className='whole-app-page-wrapper' onClick={()=>{ props.clearAllFocusedWindows()   }}>\r\n                <div className='app-wrapper'>\r\n                        <Header />\r\n                        <Navbar />\r\n                        <div className='app-wrapper-content'>\r\n                        <Route path='/profile/:userId?'\r\n                                        render={() => <Profile />} />\r\n                        <Route path='/profile_update'\r\n                                render={() => <UpdateProfile />} />\r\n                        <Route path='/login' render={() => <Login />} />\r\n                        <Route path='/users'\r\n                                render={() => <UsersContainer />} />\r\n                        <Route exact path='/chats'\r\n                                render={() => <ChatsContainer   />} />\r\n                        <Route path='/chats/:chatType/:name?'\r\n                                render={() => <ChatDetail />} />\r\n                        </div>\r\n                </div>\r\n                </div>\r\n\r\n        )\r\n})\r\n\r\nconst mapStateToProps = (state) => ({\r\n        initialized: state.app.initialized,\r\n});\r\n\r\nexport default compose(\r\n        withRouter,\r\n        connect(mapStateToProps, {initializeApp,\r\n                clearAllFocusedWindows\r\n        })\r\n )(App);\r\n ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","let initialState = {};\r\n\r\nconst sidebarReducer = (state = initialState, action) => {\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;","import {applyMiddleware, combineReducers, createStore, compose} from \"redux\";\r\nimport {reducer as formReducer} from \"redux-form\";\r\n\r\nimport profileReducer from \"./profile-reducer\";\r\nimport chatsReducer from \"./chats-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport appReducer from \"./app-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    chatsPage: chatsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer,\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\nwindow.__store__ = store;\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport {BrowserRouter, HashRouter} from \"react-router-dom\"; \r\nimport store from './redux/redux-store';\r\nimport { Provider } from 'react-redux'; \r\n\r\nimport reactDebugHooks from 'react-debug-hooks'\r\nreactDebugHooks(React)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n \r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter> \r\n\r\n    <Provider store={store} >\r\n      <App/>\r\n    </Provider>\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n  ); \r\n\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile_info\":\"ProfileInfo_profile_info__3Xye6\",\"landi_block\":\"ProfileInfo_landi_block__6gqOF\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__KO8pz\",\"ava_block\":\"ProfileInfo_ava_block__a6DMK\",\"username\":\"ProfileInfo_username__3sJav\",\"userinfo\":\"ProfileInfo_userinfo__zdjYE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chats\":\"Chats_chats__26r34\",\"chats_header\":\"Chats_chats_header__2ZjAD\",\"chatsItems\":\"Chats_chatsItems__2Ger5\",\"createChat\":\"Chats_createChat__ciYfP\",\"addMember\":\"Chats_addMember__3K9eK\",\"getMemberList\":\"Chats_getMemberList___8yTw\",\"addMemberHeader\":\"Chats_addMemberHeader__2bT9H\",\"createChatHeader\":\"Chats_createChatHeader__1fp0w\",\"createChatForm\":\"Chats_createChatForm__qU4P4\",\"chatItem\":\"Chats_chatItem__d-61Y\",\"chatItemData\":\"Chats_chatItemData__3Q4U3\",\"chatItemPhoto\":\"Chats_chatItemPhoto__8OaoM\",\"chatLMBody\":\"Chats_chatLMBody__PdKCq\",\"chatLMSended\":\"Chats_chatLMSended__30pkV\",\"chatLMAuthorName\":\"Chats_chatLMAuthorName__32CRr\",\"chatLMAuthorNameDotted\":\"Chats_chatLMAuthorNameDotted__1J1Z0\",\"chatItemNewMsgsNum\":\"Chats_chatItemNewMsgsNum__1LG1Q\",\"chatItemName\":\"Chats_chatItemName__1M4vy\",\"member\":\"Chats_member__3xMbX\",\"memberName\":\"Chats_memberName__3s-UI\",\"memberPhoto\":\"Chats_memberPhoto__1n1Td\",\"chatSettings\":\"Chats_chatSettings__3ql28\",\"chatSettingsMembersList\":\"Chats_chatSettingsMembersList__1BctW\",\"smthElseList\":\"Chats_smthElseList__3Nx2r\",\"subElem\":\"Chats_subElem__1REmT\",\"subElem2\":\"Chats_subElem2__2R59R\",\"infoItem\":\"Chats_infoItem__3fkvK\",\"deleteChat\":\"Chats_deleteChat__3vv4E\",\"renameChatItem\":\"Chats_renameChatItem__1GfT8\",\"addBorder\":\"Chats_addBorder__3HJO5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2VQZc\",\"myPostsHeader\":\"MyPosts_myPostsHeader__1m1Iu\",\"createPost\":\"MyPosts_createPost__287DL\",\"posts\":\"MyPosts_posts__zffl0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fileImageActivate\":\"Message_fileImageActivate__nEFNT\",\"fileImageDeactivate\":\"Message_fileImageDeactivate__38RWt\",\"messageFile\":\"Message_messageFile__333Xv\",\"currentChat\":\"Message_currentChat__2SCp-\",\"trash\":\"Message_trash__1XG-x\",\"chatsHeader\":\"Message_chatsHeader__1aH3p\",\"chatsHeaderSettings\":\"Message_chatsHeaderSettings__3yzbg\",\"chatsSettings\":\"Message_chatsSettings__2drea\",\"chatsSettingsItem\":\"Message_chatsSettingsItem__3uDhW\",\"chatsSettingsItemForm\":\"Message_chatsSettingsItemForm__366Ei\",\"chatsSettingsItemH\":\"Message_chatsSettingsItemH__1h7H8\",\"chatsMembers\":\"Message_chatsMembers__2noEW\",\"usersForChatActive\":\"Message_usersForChatActive__3uOxB\",\"userForChat\":\"Message_userForChat__2MVhF\",\"chatsMembersActive\":\"Message_chatsMembersActive__1xxl7\",\"chatMember\":\"Message_chatMember__2En4H\",\"chatMemberSettings\":\"Message_chatMemberSettings__1qLcz\",\"chatsHeaderName\":\"Message_chatsHeaderName__3H2k1\",\"chatsHeaderPhoto\":\"Message_chatsHeaderPhoto__uBOeZ\",\"chatsHeaderPhotoAlt\":\"Message_chatsHeaderPhotoAlt__NVmFR\",\"messages\":\"Message_messages__3MN93\",\"loadOldMsgsDiv\":\"Message_loadOldMsgsDiv__2dBwp\",\"startChatDiv\":\"Message_startChatDiv__2C1ls\",\"newMsgsStartTag\":\"Message_newMsgsStartTag__1o397\",\"message\":\"Message_message__dqadB\",\"messageBody\":\"Message_messageBody__2oQBg\",\"messageSendedEdited\":\"Message_messageSendedEdited__927WX\",\"messageSended\":\"Message_messageSended__2c3O9\",\"messageEdited\":\"Message_messageEdited__108XK\",\"messageAuthorName\":\"Message_messageAuthorName__3J3wb\",\"createMessageForm\":\"Message_createMessageForm__2iUaw\",\"editMessage\":\"Message_editMessage__24hZ6\",\"deleteMessage\":\"Message_deleteMessage__2mrWg\",\"editField\":\"Message_editField__1PtXF\",\"error\":\"Message_error__1wiZz\",\"errorField\":\"Message_errorField__MR1Xt\",\"countChars\":\"Message_countChars__M9urq\",\"smthElseListActive\":\"Message_smthElseListActive__y4JSK\",\"subElemMSBs\":\"Message_subElemMSBs__2b8dk\",\"membOperLink\":\"Message_membOperLink__3T6zI\",\"infoItemMSBs\":\"Message_infoItemMSBs__dVy0_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1SlV4\",\"loginBlock\":\"Header_loginBlock__3Y7F0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"paginator_paginator__16emb\",\"pageNumber\":\"paginator_pageNumber__25CnE\",\"selectedPage\":\"paginator_selectedPage__3QX2R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__108sy\",\"userChoosePhoto\":\"Users_userChoosePhoto__1FPZ5\",\"bottom\":\"Users_bottom__KcjiA\",\"selectedPage\":\"Users_selectedPage__3HiCL\"};"],"sourceRoot":""}